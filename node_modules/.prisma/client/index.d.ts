
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Student
 * 
 */
export type Student = {
  id: number
  name: string
  createdAt: Date
}

/**
 * Model LearningFocus
 * 
 */
export type LearningFocus = {
  id: number
  name: string
  description: string
  createdAt: Date
  studentId: number
}

/**
 * Model WeeklyPlan
 * 
 */
export type WeeklyPlan = {
  id: number
  startDate: Date
  endDate: Date
  resourcesNeeded: string[]
  activities: string[]
}

/**
 * Model Book
 * 
 */
export type Book = {
  id: number
  title: string
  author: string
  weeklyPlanId: number
}

/**
 * Model DailySchedule
 * 
 */
export type DailySchedule = {
  id: number
  date: Date
  weeklyPlanId: number
}

/**
 * Model DailyScheduleItem
 * 
 */
export type DailyScheduleItem = {
  id: number
  time: Date
  planDescription: string
  dailyScheduleId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<GlobalReject>;

  /**
   * `prisma.learningFocus`: Exposes CRUD operations for the **LearningFocus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningFoci
    * const learningFoci = await prisma.learningFocus.findMany()
    * ```
    */
  get learningFocus(): Prisma.LearningFocusDelegate<GlobalReject>;

  /**
   * `prisma.weeklyPlan`: Exposes CRUD operations for the **WeeklyPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeeklyPlans
    * const weeklyPlans = await prisma.weeklyPlan.findMany()
    * ```
    */
  get weeklyPlan(): Prisma.WeeklyPlanDelegate<GlobalReject>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<GlobalReject>;

  /**
   * `prisma.dailySchedule`: Exposes CRUD operations for the **DailySchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailySchedules
    * const dailySchedules = await prisma.dailySchedule.findMany()
    * ```
    */
  get dailySchedule(): Prisma.DailyScheduleDelegate<GlobalReject>;

  /**
   * `prisma.dailyScheduleItem`: Exposes CRUD operations for the **DailyScheduleItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyScheduleItems
    * const dailyScheduleItems = await prisma.dailyScheduleItem.findMany()
    * ```
    */
  get dailyScheduleItem(): Prisma.DailyScheduleItemDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Student: 'Student',
    LearningFocus: 'LearningFocus',
    WeeklyPlan: 'WeeklyPlan',
    Book: 'Book',
    DailySchedule: 'DailySchedule',
    DailyScheduleItem: 'DailyScheduleItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */


  export type StudentCountOutputType = {
    learningFocuses: number
  }

  export type StudentCountOutputTypeSelect = {
    learningFocuses?: boolean
  }

  export type StudentCountOutputTypeGetPayload<S extends boolean | null | undefined | StudentCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? StudentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (StudentCountOutputTypeArgs)
    ? StudentCountOutputType 
    : S extends { select: any } & (StudentCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StudentCountOutputType ? StudentCountOutputType[P] : never
  } 
      : StudentCountOutputType




  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     * 
    **/
    select?: StudentCountOutputTypeSelect | null
  }



  /**
   * Count Type WeeklyPlanCountOutputType
   */


  export type WeeklyPlanCountOutputType = {
    books: number
    dailySchedules: number
  }

  export type WeeklyPlanCountOutputTypeSelect = {
    books?: boolean
    dailySchedules?: boolean
  }

  export type WeeklyPlanCountOutputTypeGetPayload<S extends boolean | null | undefined | WeeklyPlanCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WeeklyPlanCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WeeklyPlanCountOutputTypeArgs)
    ? WeeklyPlanCountOutputType 
    : S extends { select: any } & (WeeklyPlanCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof WeeklyPlanCountOutputType ? WeeklyPlanCountOutputType[P] : never
  } 
      : WeeklyPlanCountOutputType




  // Custom InputTypes

  /**
   * WeeklyPlanCountOutputType without action
   */
  export type WeeklyPlanCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WeeklyPlanCountOutputType
     * 
    **/
    select?: WeeklyPlanCountOutputTypeSelect | null
  }



  /**
   * Count Type DailyScheduleCountOutputType
   */


  export type DailyScheduleCountOutputType = {
    dailyScheduleItems: number
  }

  export type DailyScheduleCountOutputTypeSelect = {
    dailyScheduleItems?: boolean
  }

  export type DailyScheduleCountOutputTypeGetPayload<S extends boolean | null | undefined | DailyScheduleCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DailyScheduleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DailyScheduleCountOutputTypeArgs)
    ? DailyScheduleCountOutputType 
    : S extends { select: any } & (DailyScheduleCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DailyScheduleCountOutputType ? DailyScheduleCountOutputType[P] : never
  } 
      : DailyScheduleCountOutputType




  // Custom InputTypes

  /**
   * DailyScheduleCountOutputType without action
   */
  export type DailyScheduleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DailyScheduleCountOutputType
     * 
    **/
    select?: DailyScheduleCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Student
   */


  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type StudentAggregateArgs = {
    /**
     * Filter which Student to aggregate.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs = {
    where?: StudentWhereInput
    orderBy?: Enumerable<StudentOrderByWithAggregationInput>
    by: Array<StudentScalarFieldEnum>
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }


  export type StudentGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    learningFocuses?: boolean | LearningFocusFindManyArgs
    _count?: boolean | StudentCountOutputTypeArgs
  }


  export type StudentInclude = {
    learningFocuses?: boolean | LearningFocusFindManyArgs
    _count?: boolean | StudentCountOutputTypeArgs
  } 

  export type StudentGetPayload<S extends boolean | null | undefined | StudentArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Student :
    S extends undefined ? never :
    S extends { include: any } & (StudentArgs | StudentFindManyArgs)
    ? Student  & {
    [P in TrueKeys<S['include']>]:
        P extends 'learningFocuses' ? Array < LearningFocusGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? StudentCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (StudentArgs | StudentFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'learningFocuses' ? Array < LearningFocusGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? StudentCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Student ? Student[P] : never
  } 
      : Student


  type StudentCountArgs = Merge<
    Omit<StudentFindManyArgs, 'select' | 'include'> & {
      select?: StudentCountAggregateInputType | true
    }
  >

  export interface StudentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StudentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Student'> extends True ? Prisma__StudentClient<StudentGetPayload<T>> : Prisma__StudentClient<StudentGetPayload<T> | null, null>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StudentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Student'> extends True ? Prisma__StudentClient<StudentGetPayload<T>> : Prisma__StudentClient<StudentGetPayload<T> | null, null>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs>(
      args?: SelectSubset<T, StudentFindManyArgs>
    ): PrismaPromise<Array<StudentGetPayload<T>>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs>(
      args: SelectSubset<T, StudentCreateArgs>
    ): Prisma__StudentClient<StudentGetPayload<T>>

    /**
     * Create many Students.
     *     @param {StudentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentCreateManyArgs>(
      args?: SelectSubset<T, StudentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs>(
      args: SelectSubset<T, StudentDeleteArgs>
    ): Prisma__StudentClient<StudentGetPayload<T>>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs>(
      args: SelectSubset<T, StudentUpdateArgs>
    ): Prisma__StudentClient<StudentGetPayload<T>>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs>(
      args?: SelectSubset<T, StudentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs>(
      args: SelectSubset<T, StudentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs>(
      args: SelectSubset<T, StudentUpsertArgs>
    ): Prisma__StudentClient<StudentGetPayload<T>>

    /**
     * Find one Student that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs>
    ): Prisma__StudentClient<StudentGetPayload<T>>

    /**
     * Find the first Student that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs>
    ): Prisma__StudentClient<StudentGetPayload<T>>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StudentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    learningFocuses<T extends LearningFocusFindManyArgs= {}>(args?: Subset<T, LearningFocusFindManyArgs>): PrismaPromise<Array<LearningFocusGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Student base type for findUnique actions
   */
  export type StudentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Student to fetch.
     * 
    **/
    where: StudentWhereUniqueInput
  }

  /**
   * Student: findUnique
   */
  export interface StudentFindUniqueArgs extends StudentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Student base type for findFirst actions
   */
  export type StudentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Student to fetch.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     * 
    **/
    distinct?: Enumerable<StudentScalarFieldEnum>
  }

  /**
   * Student: findFirst
   */
  export interface StudentFindFirstArgs extends StudentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Student findMany
   */
  export type StudentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Students to fetch.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * Student create
   */
  export type StudentCreateArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The data needed to create a Student.
     * 
    **/
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }


  /**
   * Student createMany
   */
  export type StudentCreateManyArgs = {
    /**
     * The data used to create many Students.
     * 
    **/
    data: Enumerable<StudentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Student update
   */
  export type StudentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The data needed to update a Student.
     * 
    **/
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     * 
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs = {
    /**
     * The data used to update Students.
     * 
    **/
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     * 
    **/
    where?: StudentWhereInput
  }


  /**
   * Student upsert
   */
  export type StudentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The filter to search for the Student to update in case it exists.
     * 
    **/
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     * 
    **/
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }


  /**
   * Student delete
   */
  export type StudentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter which Student to delete.
     * 
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs = {
    /**
     * Filter which Students to delete
     * 
    **/
    where?: StudentWhereInput
  }


  /**
   * Student: findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs = StudentFindUniqueArgsBase
      

  /**
   * Student: findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs = StudentFindFirstArgsBase
      

  /**
   * Student without action
   */
  export type StudentArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
  }



  /**
   * Model LearningFocus
   */


  export type AggregateLearningFocus = {
    _count: LearningFocusCountAggregateOutputType | null
    _avg: LearningFocusAvgAggregateOutputType | null
    _sum: LearningFocusSumAggregateOutputType | null
    _min: LearningFocusMinAggregateOutputType | null
    _max: LearningFocusMaxAggregateOutputType | null
  }

  export type LearningFocusAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
  }

  export type LearningFocusSumAggregateOutputType = {
    id: number | null
    studentId: number | null
  }

  export type LearningFocusMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    studentId: number | null
  }

  export type LearningFocusMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    studentId: number | null
  }

  export type LearningFocusCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    studentId: number
    _all: number
  }


  export type LearningFocusAvgAggregateInputType = {
    id?: true
    studentId?: true
  }

  export type LearningFocusSumAggregateInputType = {
    id?: true
    studentId?: true
  }

  export type LearningFocusMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    studentId?: true
  }

  export type LearningFocusMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    studentId?: true
  }

  export type LearningFocusCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    studentId?: true
    _all?: true
  }

  export type LearningFocusAggregateArgs = {
    /**
     * Filter which LearningFocus to aggregate.
     * 
    **/
    where?: LearningFocusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningFoci to fetch.
     * 
    **/
    orderBy?: Enumerable<LearningFocusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LearningFocusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningFoci from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningFoci.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningFoci
    **/
    _count?: true | LearningFocusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LearningFocusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LearningFocusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningFocusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningFocusMaxAggregateInputType
  }

  export type GetLearningFocusAggregateType<T extends LearningFocusAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningFocus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningFocus[P]>
      : GetScalarType<T[P], AggregateLearningFocus[P]>
  }




  export type LearningFocusGroupByArgs = {
    where?: LearningFocusWhereInput
    orderBy?: Enumerable<LearningFocusOrderByWithAggregationInput>
    by: Array<LearningFocusScalarFieldEnum>
    having?: LearningFocusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningFocusCountAggregateInputType | true
    _avg?: LearningFocusAvgAggregateInputType
    _sum?: LearningFocusSumAggregateInputType
    _min?: LearningFocusMinAggregateInputType
    _max?: LearningFocusMaxAggregateInputType
  }


  export type LearningFocusGroupByOutputType = {
    id: number
    name: string
    description: string
    createdAt: Date
    studentId: number
    _count: LearningFocusCountAggregateOutputType | null
    _avg: LearningFocusAvgAggregateOutputType | null
    _sum: LearningFocusSumAggregateOutputType | null
    _min: LearningFocusMinAggregateOutputType | null
    _max: LearningFocusMaxAggregateOutputType | null
  }

  type GetLearningFocusGroupByPayload<T extends LearningFocusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LearningFocusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningFocusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningFocusGroupByOutputType[P]>
            : GetScalarType<T[P], LearningFocusGroupByOutputType[P]>
        }
      >
    >


  export type LearningFocusSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    studentId?: boolean
    student?: boolean | StudentArgs
  }


  export type LearningFocusInclude = {
    student?: boolean | StudentArgs
  } 

  export type LearningFocusGetPayload<S extends boolean | null | undefined | LearningFocusArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LearningFocus :
    S extends undefined ? never :
    S extends { include: any } & (LearningFocusArgs | LearningFocusFindManyArgs)
    ? LearningFocus  & {
    [P in TrueKeys<S['include']>]:
        P extends 'student' ? StudentGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (LearningFocusArgs | LearningFocusFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'student' ? StudentGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof LearningFocus ? LearningFocus[P] : never
  } 
      : LearningFocus


  type LearningFocusCountArgs = Merge<
    Omit<LearningFocusFindManyArgs, 'select' | 'include'> & {
      select?: LearningFocusCountAggregateInputType | true
    }
  >

  export interface LearningFocusDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one LearningFocus that matches the filter.
     * @param {LearningFocusFindUniqueArgs} args - Arguments to find a LearningFocus
     * @example
     * // Get one LearningFocus
     * const learningFocus = await prisma.learningFocus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LearningFocusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LearningFocusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LearningFocus'> extends True ? Prisma__LearningFocusClient<LearningFocusGetPayload<T>> : Prisma__LearningFocusClient<LearningFocusGetPayload<T> | null, null>

    /**
     * Find the first LearningFocus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningFocusFindFirstArgs} args - Arguments to find a LearningFocus
     * @example
     * // Get one LearningFocus
     * const learningFocus = await prisma.learningFocus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LearningFocusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LearningFocusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LearningFocus'> extends True ? Prisma__LearningFocusClient<LearningFocusGetPayload<T>> : Prisma__LearningFocusClient<LearningFocusGetPayload<T> | null, null>

    /**
     * Find zero or more LearningFoci that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningFocusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningFoci
     * const learningFoci = await prisma.learningFocus.findMany()
     * 
     * // Get first 10 LearningFoci
     * const learningFoci = await prisma.learningFocus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningFocusWithIdOnly = await prisma.learningFocus.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LearningFocusFindManyArgs>(
      args?: SelectSubset<T, LearningFocusFindManyArgs>
    ): PrismaPromise<Array<LearningFocusGetPayload<T>>>

    /**
     * Create a LearningFocus.
     * @param {LearningFocusCreateArgs} args - Arguments to create a LearningFocus.
     * @example
     * // Create one LearningFocus
     * const LearningFocus = await prisma.learningFocus.create({
     *   data: {
     *     // ... data to create a LearningFocus
     *   }
     * })
     * 
    **/
    create<T extends LearningFocusCreateArgs>(
      args: SelectSubset<T, LearningFocusCreateArgs>
    ): Prisma__LearningFocusClient<LearningFocusGetPayload<T>>

    /**
     * Create many LearningFoci.
     *     @param {LearningFocusCreateManyArgs} args - Arguments to create many LearningFoci.
     *     @example
     *     // Create many LearningFoci
     *     const learningFocus = await prisma.learningFocus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LearningFocusCreateManyArgs>(
      args?: SelectSubset<T, LearningFocusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LearningFocus.
     * @param {LearningFocusDeleteArgs} args - Arguments to delete one LearningFocus.
     * @example
     * // Delete one LearningFocus
     * const LearningFocus = await prisma.learningFocus.delete({
     *   where: {
     *     // ... filter to delete one LearningFocus
     *   }
     * })
     * 
    **/
    delete<T extends LearningFocusDeleteArgs>(
      args: SelectSubset<T, LearningFocusDeleteArgs>
    ): Prisma__LearningFocusClient<LearningFocusGetPayload<T>>

    /**
     * Update one LearningFocus.
     * @param {LearningFocusUpdateArgs} args - Arguments to update one LearningFocus.
     * @example
     * // Update one LearningFocus
     * const learningFocus = await prisma.learningFocus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LearningFocusUpdateArgs>(
      args: SelectSubset<T, LearningFocusUpdateArgs>
    ): Prisma__LearningFocusClient<LearningFocusGetPayload<T>>

    /**
     * Delete zero or more LearningFoci.
     * @param {LearningFocusDeleteManyArgs} args - Arguments to filter LearningFoci to delete.
     * @example
     * // Delete a few LearningFoci
     * const { count } = await prisma.learningFocus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LearningFocusDeleteManyArgs>(
      args?: SelectSubset<T, LearningFocusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningFoci.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningFocusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningFoci
     * const learningFocus = await prisma.learningFocus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LearningFocusUpdateManyArgs>(
      args: SelectSubset<T, LearningFocusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LearningFocus.
     * @param {LearningFocusUpsertArgs} args - Arguments to update or create a LearningFocus.
     * @example
     * // Update or create a LearningFocus
     * const learningFocus = await prisma.learningFocus.upsert({
     *   create: {
     *     // ... data to create a LearningFocus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningFocus we want to update
     *   }
     * })
    **/
    upsert<T extends LearningFocusUpsertArgs>(
      args: SelectSubset<T, LearningFocusUpsertArgs>
    ): Prisma__LearningFocusClient<LearningFocusGetPayload<T>>

    /**
     * Find one LearningFocus that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LearningFocusFindUniqueOrThrowArgs} args - Arguments to find a LearningFocus
     * @example
     * // Get one LearningFocus
     * const learningFocus = await prisma.learningFocus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LearningFocusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LearningFocusFindUniqueOrThrowArgs>
    ): Prisma__LearningFocusClient<LearningFocusGetPayload<T>>

    /**
     * Find the first LearningFocus that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningFocusFindFirstOrThrowArgs} args - Arguments to find a LearningFocus
     * @example
     * // Get one LearningFocus
     * const learningFocus = await prisma.learningFocus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LearningFocusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LearningFocusFindFirstOrThrowArgs>
    ): Prisma__LearningFocusClient<LearningFocusGetPayload<T>>

    /**
     * Count the number of LearningFoci.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningFocusCountArgs} args - Arguments to filter LearningFoci to count.
     * @example
     * // Count the number of LearningFoci
     * const count = await prisma.learningFocus.count({
     *   where: {
     *     // ... the filter for the LearningFoci we want to count
     *   }
     * })
    **/
    count<T extends LearningFocusCountArgs>(
      args?: Subset<T, LearningFocusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningFocusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningFocus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningFocusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningFocusAggregateArgs>(args: Subset<T, LearningFocusAggregateArgs>): PrismaPromise<GetLearningFocusAggregateType<T>>

    /**
     * Group by LearningFocus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningFocusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningFocusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningFocusGroupByArgs['orderBy'] }
        : { orderBy?: LearningFocusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningFocusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningFocusGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningFocus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LearningFocusClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    student<T extends StudentArgs= {}>(args?: Subset<T, StudentArgs>): Prisma__StudentClient<StudentGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LearningFocus base type for findUnique actions
   */
  export type LearningFocusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
    /**
     * Filter, which LearningFocus to fetch.
     * 
    **/
    where: LearningFocusWhereUniqueInput
  }

  /**
   * LearningFocus: findUnique
   */
  export interface LearningFocusFindUniqueArgs extends LearningFocusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LearningFocus base type for findFirst actions
   */
  export type LearningFocusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
    /**
     * Filter, which LearningFocus to fetch.
     * 
    **/
    where?: LearningFocusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningFoci to fetch.
     * 
    **/
    orderBy?: Enumerable<LearningFocusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningFoci.
     * 
    **/
    cursor?: LearningFocusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningFoci from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningFoci.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningFoci.
     * 
    **/
    distinct?: Enumerable<LearningFocusScalarFieldEnum>
  }

  /**
   * LearningFocus: findFirst
   */
  export interface LearningFocusFindFirstArgs extends LearningFocusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LearningFocus findMany
   */
  export type LearningFocusFindManyArgs = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
    /**
     * Filter, which LearningFoci to fetch.
     * 
    **/
    where?: LearningFocusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningFoci to fetch.
     * 
    **/
    orderBy?: Enumerable<LearningFocusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningFoci.
     * 
    **/
    cursor?: LearningFocusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningFoci from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningFoci.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LearningFocusScalarFieldEnum>
  }


  /**
   * LearningFocus create
   */
  export type LearningFocusCreateArgs = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
    /**
     * The data needed to create a LearningFocus.
     * 
    **/
    data: XOR<LearningFocusCreateInput, LearningFocusUncheckedCreateInput>
  }


  /**
   * LearningFocus createMany
   */
  export type LearningFocusCreateManyArgs = {
    /**
     * The data used to create many LearningFoci.
     * 
    **/
    data: Enumerable<LearningFocusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LearningFocus update
   */
  export type LearningFocusUpdateArgs = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
    /**
     * The data needed to update a LearningFocus.
     * 
    **/
    data: XOR<LearningFocusUpdateInput, LearningFocusUncheckedUpdateInput>
    /**
     * Choose, which LearningFocus to update.
     * 
    **/
    where: LearningFocusWhereUniqueInput
  }


  /**
   * LearningFocus updateMany
   */
  export type LearningFocusUpdateManyArgs = {
    /**
     * The data used to update LearningFoci.
     * 
    **/
    data: XOR<LearningFocusUpdateManyMutationInput, LearningFocusUncheckedUpdateManyInput>
    /**
     * Filter which LearningFoci to update
     * 
    **/
    where?: LearningFocusWhereInput
  }


  /**
   * LearningFocus upsert
   */
  export type LearningFocusUpsertArgs = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
    /**
     * The filter to search for the LearningFocus to update in case it exists.
     * 
    **/
    where: LearningFocusWhereUniqueInput
    /**
     * In case the LearningFocus found by the `where` argument doesn't exist, create a new LearningFocus with this data.
     * 
    **/
    create: XOR<LearningFocusCreateInput, LearningFocusUncheckedCreateInput>
    /**
     * In case the LearningFocus was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LearningFocusUpdateInput, LearningFocusUncheckedUpdateInput>
  }


  /**
   * LearningFocus delete
   */
  export type LearningFocusDeleteArgs = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
    /**
     * Filter which LearningFocus to delete.
     * 
    **/
    where: LearningFocusWhereUniqueInput
  }


  /**
   * LearningFocus deleteMany
   */
  export type LearningFocusDeleteManyArgs = {
    /**
     * Filter which LearningFoci to delete
     * 
    **/
    where?: LearningFocusWhereInput
  }


  /**
   * LearningFocus: findUniqueOrThrow
   */
  export type LearningFocusFindUniqueOrThrowArgs = LearningFocusFindUniqueArgsBase
      

  /**
   * LearningFocus: findFirstOrThrow
   */
  export type LearningFocusFindFirstOrThrowArgs = LearningFocusFindFirstArgsBase
      

  /**
   * LearningFocus without action
   */
  export type LearningFocusArgs = {
    /**
     * Select specific fields to fetch from the LearningFocus
     * 
    **/
    select?: LearningFocusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LearningFocusInclude | null
  }



  /**
   * Model WeeklyPlan
   */


  export type AggregateWeeklyPlan = {
    _count: WeeklyPlanCountAggregateOutputType | null
    _avg: WeeklyPlanAvgAggregateOutputType | null
    _sum: WeeklyPlanSumAggregateOutputType | null
    _min: WeeklyPlanMinAggregateOutputType | null
    _max: WeeklyPlanMaxAggregateOutputType | null
  }

  export type WeeklyPlanAvgAggregateOutputType = {
    id: number | null
  }

  export type WeeklyPlanSumAggregateOutputType = {
    id: number | null
  }

  export type WeeklyPlanMinAggregateOutputType = {
    id: number | null
    startDate: Date | null
    endDate: Date | null
  }

  export type WeeklyPlanMaxAggregateOutputType = {
    id: number | null
    startDate: Date | null
    endDate: Date | null
  }

  export type WeeklyPlanCountAggregateOutputType = {
    id: number
    startDate: number
    endDate: number
    resourcesNeeded: number
    activities: number
    _all: number
  }


  export type WeeklyPlanAvgAggregateInputType = {
    id?: true
  }

  export type WeeklyPlanSumAggregateInputType = {
    id?: true
  }

  export type WeeklyPlanMinAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
  }

  export type WeeklyPlanMaxAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
  }

  export type WeeklyPlanCountAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    resourcesNeeded?: true
    activities?: true
    _all?: true
  }

  export type WeeklyPlanAggregateArgs = {
    /**
     * Filter which WeeklyPlan to aggregate.
     * 
    **/
    where?: WeeklyPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyPlans to fetch.
     * 
    **/
    orderBy?: Enumerable<WeeklyPlanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WeeklyPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyPlans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyPlans.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeeklyPlans
    **/
    _count?: true | WeeklyPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeeklyPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeeklyPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeeklyPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeeklyPlanMaxAggregateInputType
  }

  export type GetWeeklyPlanAggregateType<T extends WeeklyPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateWeeklyPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeeklyPlan[P]>
      : GetScalarType<T[P], AggregateWeeklyPlan[P]>
  }




  export type WeeklyPlanGroupByArgs = {
    where?: WeeklyPlanWhereInput
    orderBy?: Enumerable<WeeklyPlanOrderByWithAggregationInput>
    by: Array<WeeklyPlanScalarFieldEnum>
    having?: WeeklyPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeeklyPlanCountAggregateInputType | true
    _avg?: WeeklyPlanAvgAggregateInputType
    _sum?: WeeklyPlanSumAggregateInputType
    _min?: WeeklyPlanMinAggregateInputType
    _max?: WeeklyPlanMaxAggregateInputType
  }


  export type WeeklyPlanGroupByOutputType = {
    id: number
    startDate: Date
    endDate: Date
    resourcesNeeded: string[]
    activities: string[]
    _count: WeeklyPlanCountAggregateOutputType | null
    _avg: WeeklyPlanAvgAggregateOutputType | null
    _sum: WeeklyPlanSumAggregateOutputType | null
    _min: WeeklyPlanMinAggregateOutputType | null
    _max: WeeklyPlanMaxAggregateOutputType | null
  }

  type GetWeeklyPlanGroupByPayload<T extends WeeklyPlanGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WeeklyPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeeklyPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeeklyPlanGroupByOutputType[P]>
            : GetScalarType<T[P], WeeklyPlanGroupByOutputType[P]>
        }
      >
    >


  export type WeeklyPlanSelect = {
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    books?: boolean | BookFindManyArgs
    resourcesNeeded?: boolean
    activities?: boolean
    dailySchedules?: boolean | DailyScheduleFindManyArgs
    _count?: boolean | WeeklyPlanCountOutputTypeArgs
  }


  export type WeeklyPlanInclude = {
    books?: boolean | BookFindManyArgs
    dailySchedules?: boolean | DailyScheduleFindManyArgs
    _count?: boolean | WeeklyPlanCountOutputTypeArgs
  } 

  export type WeeklyPlanGetPayload<S extends boolean | null | undefined | WeeklyPlanArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WeeklyPlan :
    S extends undefined ? never :
    S extends { include: any } & (WeeklyPlanArgs | WeeklyPlanFindManyArgs)
    ? WeeklyPlan  & {
    [P in TrueKeys<S['include']>]:
        P extends 'books' ? Array < BookGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'dailySchedules' ? Array < DailyScheduleGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? WeeklyPlanCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (WeeklyPlanArgs | WeeklyPlanFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'books' ? Array < BookGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'dailySchedules' ? Array < DailyScheduleGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? WeeklyPlanCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof WeeklyPlan ? WeeklyPlan[P] : never
  } 
      : WeeklyPlan


  type WeeklyPlanCountArgs = Merge<
    Omit<WeeklyPlanFindManyArgs, 'select' | 'include'> & {
      select?: WeeklyPlanCountAggregateInputType | true
    }
  >

  export interface WeeklyPlanDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one WeeklyPlan that matches the filter.
     * @param {WeeklyPlanFindUniqueArgs} args - Arguments to find a WeeklyPlan
     * @example
     * // Get one WeeklyPlan
     * const weeklyPlan = await prisma.weeklyPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeeklyPlanFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WeeklyPlanFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WeeklyPlan'> extends True ? Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>> : Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T> | null, null>

    /**
     * Find the first WeeklyPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyPlanFindFirstArgs} args - Arguments to find a WeeklyPlan
     * @example
     * // Get one WeeklyPlan
     * const weeklyPlan = await prisma.weeklyPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeeklyPlanFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WeeklyPlanFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WeeklyPlan'> extends True ? Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>> : Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T> | null, null>

    /**
     * Find zero or more WeeklyPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyPlanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeeklyPlans
     * const weeklyPlans = await prisma.weeklyPlan.findMany()
     * 
     * // Get first 10 WeeklyPlans
     * const weeklyPlans = await prisma.weeklyPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weeklyPlanWithIdOnly = await prisma.weeklyPlan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeeklyPlanFindManyArgs>(
      args?: SelectSubset<T, WeeklyPlanFindManyArgs>
    ): PrismaPromise<Array<WeeklyPlanGetPayload<T>>>

    /**
     * Create a WeeklyPlan.
     * @param {WeeklyPlanCreateArgs} args - Arguments to create a WeeklyPlan.
     * @example
     * // Create one WeeklyPlan
     * const WeeklyPlan = await prisma.weeklyPlan.create({
     *   data: {
     *     // ... data to create a WeeklyPlan
     *   }
     * })
     * 
    **/
    create<T extends WeeklyPlanCreateArgs>(
      args: SelectSubset<T, WeeklyPlanCreateArgs>
    ): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>>

    /**
     * Create many WeeklyPlans.
     *     @param {WeeklyPlanCreateManyArgs} args - Arguments to create many WeeklyPlans.
     *     @example
     *     // Create many WeeklyPlans
     *     const weeklyPlan = await prisma.weeklyPlan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WeeklyPlanCreateManyArgs>(
      args?: SelectSubset<T, WeeklyPlanCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a WeeklyPlan.
     * @param {WeeklyPlanDeleteArgs} args - Arguments to delete one WeeklyPlan.
     * @example
     * // Delete one WeeklyPlan
     * const WeeklyPlan = await prisma.weeklyPlan.delete({
     *   where: {
     *     // ... filter to delete one WeeklyPlan
     *   }
     * })
     * 
    **/
    delete<T extends WeeklyPlanDeleteArgs>(
      args: SelectSubset<T, WeeklyPlanDeleteArgs>
    ): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>>

    /**
     * Update one WeeklyPlan.
     * @param {WeeklyPlanUpdateArgs} args - Arguments to update one WeeklyPlan.
     * @example
     * // Update one WeeklyPlan
     * const weeklyPlan = await prisma.weeklyPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeeklyPlanUpdateArgs>(
      args: SelectSubset<T, WeeklyPlanUpdateArgs>
    ): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>>

    /**
     * Delete zero or more WeeklyPlans.
     * @param {WeeklyPlanDeleteManyArgs} args - Arguments to filter WeeklyPlans to delete.
     * @example
     * // Delete a few WeeklyPlans
     * const { count } = await prisma.weeklyPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeeklyPlanDeleteManyArgs>(
      args?: SelectSubset<T, WeeklyPlanDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklyPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeeklyPlans
     * const weeklyPlan = await prisma.weeklyPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeeklyPlanUpdateManyArgs>(
      args: SelectSubset<T, WeeklyPlanUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one WeeklyPlan.
     * @param {WeeklyPlanUpsertArgs} args - Arguments to update or create a WeeklyPlan.
     * @example
     * // Update or create a WeeklyPlan
     * const weeklyPlan = await prisma.weeklyPlan.upsert({
     *   create: {
     *     // ... data to create a WeeklyPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeeklyPlan we want to update
     *   }
     * })
    **/
    upsert<T extends WeeklyPlanUpsertArgs>(
      args: SelectSubset<T, WeeklyPlanUpsertArgs>
    ): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>>

    /**
     * Find one WeeklyPlan that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {WeeklyPlanFindUniqueOrThrowArgs} args - Arguments to find a WeeklyPlan
     * @example
     * // Get one WeeklyPlan
     * const weeklyPlan = await prisma.weeklyPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeeklyPlanFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WeeklyPlanFindUniqueOrThrowArgs>
    ): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>>

    /**
     * Find the first WeeklyPlan that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyPlanFindFirstOrThrowArgs} args - Arguments to find a WeeklyPlan
     * @example
     * // Get one WeeklyPlan
     * const weeklyPlan = await prisma.weeklyPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeeklyPlanFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WeeklyPlanFindFirstOrThrowArgs>
    ): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T>>

    /**
     * Count the number of WeeklyPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyPlanCountArgs} args - Arguments to filter WeeklyPlans to count.
     * @example
     * // Count the number of WeeklyPlans
     * const count = await prisma.weeklyPlan.count({
     *   where: {
     *     // ... the filter for the WeeklyPlans we want to count
     *   }
     * })
    **/
    count<T extends WeeklyPlanCountArgs>(
      args?: Subset<T, WeeklyPlanCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeeklyPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeeklyPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeeklyPlanAggregateArgs>(args: Subset<T, WeeklyPlanAggregateArgs>): PrismaPromise<GetWeeklyPlanAggregateType<T>>

    /**
     * Group by WeeklyPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeeklyPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeeklyPlanGroupByArgs['orderBy'] }
        : { orderBy?: WeeklyPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeeklyPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeeklyPlanGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WeeklyPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WeeklyPlanClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends BookFindManyArgs= {}>(args?: Subset<T, BookFindManyArgs>): PrismaPromise<Array<BookGetPayload<T>>| Null>;

    dailySchedules<T extends DailyScheduleFindManyArgs= {}>(args?: Subset<T, DailyScheduleFindManyArgs>): PrismaPromise<Array<DailyScheduleGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WeeklyPlan base type for findUnique actions
   */
  export type WeeklyPlanFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
    /**
     * Filter, which WeeklyPlan to fetch.
     * 
    **/
    where: WeeklyPlanWhereUniqueInput
  }

  /**
   * WeeklyPlan: findUnique
   */
  export interface WeeklyPlanFindUniqueArgs extends WeeklyPlanFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WeeklyPlan base type for findFirst actions
   */
  export type WeeklyPlanFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
    /**
     * Filter, which WeeklyPlan to fetch.
     * 
    **/
    where?: WeeklyPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyPlans to fetch.
     * 
    **/
    orderBy?: Enumerable<WeeklyPlanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklyPlans.
     * 
    **/
    cursor?: WeeklyPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyPlans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyPlans.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklyPlans.
     * 
    **/
    distinct?: Enumerable<WeeklyPlanScalarFieldEnum>
  }

  /**
   * WeeklyPlan: findFirst
   */
  export interface WeeklyPlanFindFirstArgs extends WeeklyPlanFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WeeklyPlan findMany
   */
  export type WeeklyPlanFindManyArgs = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
    /**
     * Filter, which WeeklyPlans to fetch.
     * 
    **/
    where?: WeeklyPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyPlans to fetch.
     * 
    **/
    orderBy?: Enumerable<WeeklyPlanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeeklyPlans.
     * 
    **/
    cursor?: WeeklyPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyPlans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyPlans.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WeeklyPlanScalarFieldEnum>
  }


  /**
   * WeeklyPlan create
   */
  export type WeeklyPlanCreateArgs = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
    /**
     * The data needed to create a WeeklyPlan.
     * 
    **/
    data: XOR<WeeklyPlanCreateInput, WeeklyPlanUncheckedCreateInput>
  }


  /**
   * WeeklyPlan createMany
   */
  export type WeeklyPlanCreateManyArgs = {
    /**
     * The data used to create many WeeklyPlans.
     * 
    **/
    data: Enumerable<WeeklyPlanCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WeeklyPlan update
   */
  export type WeeklyPlanUpdateArgs = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
    /**
     * The data needed to update a WeeklyPlan.
     * 
    **/
    data: XOR<WeeklyPlanUpdateInput, WeeklyPlanUncheckedUpdateInput>
    /**
     * Choose, which WeeklyPlan to update.
     * 
    **/
    where: WeeklyPlanWhereUniqueInput
  }


  /**
   * WeeklyPlan updateMany
   */
  export type WeeklyPlanUpdateManyArgs = {
    /**
     * The data used to update WeeklyPlans.
     * 
    **/
    data: XOR<WeeklyPlanUpdateManyMutationInput, WeeklyPlanUncheckedUpdateManyInput>
    /**
     * Filter which WeeklyPlans to update
     * 
    **/
    where?: WeeklyPlanWhereInput
  }


  /**
   * WeeklyPlan upsert
   */
  export type WeeklyPlanUpsertArgs = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
    /**
     * The filter to search for the WeeklyPlan to update in case it exists.
     * 
    **/
    where: WeeklyPlanWhereUniqueInput
    /**
     * In case the WeeklyPlan found by the `where` argument doesn't exist, create a new WeeklyPlan with this data.
     * 
    **/
    create: XOR<WeeklyPlanCreateInput, WeeklyPlanUncheckedCreateInput>
    /**
     * In case the WeeklyPlan was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WeeklyPlanUpdateInput, WeeklyPlanUncheckedUpdateInput>
  }


  /**
   * WeeklyPlan delete
   */
  export type WeeklyPlanDeleteArgs = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
    /**
     * Filter which WeeklyPlan to delete.
     * 
    **/
    where: WeeklyPlanWhereUniqueInput
  }


  /**
   * WeeklyPlan deleteMany
   */
  export type WeeklyPlanDeleteManyArgs = {
    /**
     * Filter which WeeklyPlans to delete
     * 
    **/
    where?: WeeklyPlanWhereInput
  }


  /**
   * WeeklyPlan: findUniqueOrThrow
   */
  export type WeeklyPlanFindUniqueOrThrowArgs = WeeklyPlanFindUniqueArgsBase
      

  /**
   * WeeklyPlan: findFirstOrThrow
   */
  export type WeeklyPlanFindFirstOrThrowArgs = WeeklyPlanFindFirstArgsBase
      

  /**
   * WeeklyPlan without action
   */
  export type WeeklyPlanArgs = {
    /**
     * Select specific fields to fetch from the WeeklyPlan
     * 
    **/
    select?: WeeklyPlanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WeeklyPlanInclude | null
  }



  /**
   * Model Book
   */


  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    id: number | null
    weeklyPlanId: number | null
  }

  export type BookSumAggregateOutputType = {
    id: number | null
    weeklyPlanId: number | null
  }

  export type BookMinAggregateOutputType = {
    id: number | null
    title: string | null
    author: string | null
    weeklyPlanId: number | null
  }

  export type BookMaxAggregateOutputType = {
    id: number | null
    title: string | null
    author: string | null
    weeklyPlanId: number | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    title: number
    author: number
    weeklyPlanId: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    id?: true
    weeklyPlanId?: true
  }

  export type BookSumAggregateInputType = {
    id?: true
    weeklyPlanId?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    title?: true
    author?: true
    weeklyPlanId?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    title?: true
    author?: true
    weeklyPlanId?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    title?: true
    author?: true
    weeklyPlanId?: true
    _all?: true
  }

  export type BookAggregateArgs = {
    /**
     * Filter which Book to aggregate.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs = {
    where?: BookWhereInput
    orderBy?: Enumerable<BookOrderByWithAggregationInput>
    by: Array<BookScalarFieldEnum>
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }


  export type BookGroupByOutputType = {
    id: number
    title: string
    author: string
    weeklyPlanId: number
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect = {
    id?: boolean
    title?: boolean
    author?: boolean
    weeklyPlanId?: boolean
    weeklyPlan?: boolean | WeeklyPlanArgs
  }


  export type BookInclude = {
    weeklyPlan?: boolean | WeeklyPlanArgs
  } 

  export type BookGetPayload<S extends boolean | null | undefined | BookArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Book :
    S extends undefined ? never :
    S extends { include: any } & (BookArgs | BookFindManyArgs)
    ? Book  & {
    [P in TrueKeys<S['include']>]:
        P extends 'weeklyPlan' ? WeeklyPlanGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (BookArgs | BookFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'weeklyPlan' ? WeeklyPlanGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Book ? Book[P] : never
  } 
      : Book


  type BookCountArgs = Merge<
    Omit<BookFindManyArgs, 'select' | 'include'> & {
      select?: BookCountAggregateInputType | true
    }
  >

  export interface BookDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Book'> extends True ? Prisma__BookClient<BookGetPayload<T>> : Prisma__BookClient<BookGetPayload<T> | null, null>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Book'> extends True ? Prisma__BookClient<BookGetPayload<T>> : Prisma__BookClient<BookGetPayload<T> | null, null>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookFindManyArgs>(
      args?: SelectSubset<T, BookFindManyArgs>
    ): PrismaPromise<Array<BookGetPayload<T>>>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
    **/
    create<T extends BookCreateArgs>(
      args: SelectSubset<T, BookCreateArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Create many Books.
     *     @param {BookCreateManyArgs} args - Arguments to create many Books.
     *     @example
     *     // Create many Books
     *     const book = await prisma.book.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookCreateManyArgs>(
      args?: SelectSubset<T, BookCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
    **/
    delete<T extends BookDeleteArgs>(
      args: SelectSubset<T, BookDeleteArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookUpdateArgs>(
      args: SelectSubset<T, BookUpdateArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookDeleteManyArgs>(
      args?: SelectSubset<T, BookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookUpdateManyArgs>(
      args: SelectSubset<T, BookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
    **/
    upsert<T extends BookUpsertArgs>(
      args: SelectSubset<T, BookUpsertArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Find one Book that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookFindUniqueOrThrowArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Find the first Book that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookFindFirstOrThrowArgs>
    ): Prisma__BookClient<BookGetPayload<T>>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    weeklyPlan<T extends WeeklyPlanArgs= {}>(args?: Subset<T, WeeklyPlanArgs>): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Book base type for findUnique actions
   */
  export type BookFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where: BookWhereUniqueInput
  }

  /**
   * Book: findUnique
   */
  export interface BookFindUniqueArgs extends BookFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Book base type for findFirst actions
   */
  export type BookFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     * 
    **/
    distinct?: Enumerable<BookScalarFieldEnum>
  }

  /**
   * Book: findFirst
   */
  export interface BookFindFirstArgs extends BookFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Book findMany
   */
  export type BookFindManyArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Books to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookScalarFieldEnum>
  }


  /**
   * Book create
   */
  export type BookCreateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to create a Book.
     * 
    **/
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }


  /**
   * Book createMany
   */
  export type BookCreateManyArgs = {
    /**
     * The data used to create many Books.
     * 
    **/
    data: Enumerable<BookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Book update
   */
  export type BookUpdateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to update a Book.
     * 
    **/
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs = {
    /**
     * The data used to update Books.
     * 
    **/
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     * 
    **/
    where?: BookWhereInput
  }


  /**
   * Book upsert
   */
  export type BookUpsertArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The filter to search for the Book to update in case it exists.
     * 
    **/
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     * 
    **/
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }


  /**
   * Book delete
   */
  export type BookDeleteArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter which Book to delete.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs = {
    /**
     * Filter which Books to delete
     * 
    **/
    where?: BookWhereInput
  }


  /**
   * Book: findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs = BookFindUniqueArgsBase
      

  /**
   * Book: findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs = BookFindFirstArgsBase
      

  /**
   * Book without action
   */
  export type BookArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
  }



  /**
   * Model DailySchedule
   */


  export type AggregateDailySchedule = {
    _count: DailyScheduleCountAggregateOutputType | null
    _avg: DailyScheduleAvgAggregateOutputType | null
    _sum: DailyScheduleSumAggregateOutputType | null
    _min: DailyScheduleMinAggregateOutputType | null
    _max: DailyScheduleMaxAggregateOutputType | null
  }

  export type DailyScheduleAvgAggregateOutputType = {
    id: number | null
    weeklyPlanId: number | null
  }

  export type DailyScheduleSumAggregateOutputType = {
    id: number | null
    weeklyPlanId: number | null
  }

  export type DailyScheduleMinAggregateOutputType = {
    id: number | null
    date: Date | null
    weeklyPlanId: number | null
  }

  export type DailyScheduleMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    weeklyPlanId: number | null
  }

  export type DailyScheduleCountAggregateOutputType = {
    id: number
    date: number
    weeklyPlanId: number
    _all: number
  }


  export type DailyScheduleAvgAggregateInputType = {
    id?: true
    weeklyPlanId?: true
  }

  export type DailyScheduleSumAggregateInputType = {
    id?: true
    weeklyPlanId?: true
  }

  export type DailyScheduleMinAggregateInputType = {
    id?: true
    date?: true
    weeklyPlanId?: true
  }

  export type DailyScheduleMaxAggregateInputType = {
    id?: true
    date?: true
    weeklyPlanId?: true
  }

  export type DailyScheduleCountAggregateInputType = {
    id?: true
    date?: true
    weeklyPlanId?: true
    _all?: true
  }

  export type DailyScheduleAggregateArgs = {
    /**
     * Filter which DailySchedule to aggregate.
     * 
    **/
    where?: DailyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailySchedules to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DailyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailySchedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailySchedules.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailySchedules
    **/
    _count?: true | DailyScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyScheduleMaxAggregateInputType
  }

  export type GetDailyScheduleAggregateType<T extends DailyScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateDailySchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailySchedule[P]>
      : GetScalarType<T[P], AggregateDailySchedule[P]>
  }




  export type DailyScheduleGroupByArgs = {
    where?: DailyScheduleWhereInput
    orderBy?: Enumerable<DailyScheduleOrderByWithAggregationInput>
    by: Array<DailyScheduleScalarFieldEnum>
    having?: DailyScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyScheduleCountAggregateInputType | true
    _avg?: DailyScheduleAvgAggregateInputType
    _sum?: DailyScheduleSumAggregateInputType
    _min?: DailyScheduleMinAggregateInputType
    _max?: DailyScheduleMaxAggregateInputType
  }


  export type DailyScheduleGroupByOutputType = {
    id: number
    date: Date
    weeklyPlanId: number
    _count: DailyScheduleCountAggregateOutputType | null
    _avg: DailyScheduleAvgAggregateOutputType | null
    _sum: DailyScheduleSumAggregateOutputType | null
    _min: DailyScheduleMinAggregateOutputType | null
    _max: DailyScheduleMaxAggregateOutputType | null
  }

  type GetDailyScheduleGroupByPayload<T extends DailyScheduleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DailyScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], DailyScheduleGroupByOutputType[P]>
        }
      >
    >


  export type DailyScheduleSelect = {
    id?: boolean
    date?: boolean
    dailyScheduleItems?: boolean | DailyScheduleItemFindManyArgs
    weeklyPlanId?: boolean
    weeklyPlan?: boolean | WeeklyPlanArgs
    _count?: boolean | DailyScheduleCountOutputTypeArgs
  }


  export type DailyScheduleInclude = {
    dailyScheduleItems?: boolean | DailyScheduleItemFindManyArgs
    weeklyPlan?: boolean | WeeklyPlanArgs
    _count?: boolean | DailyScheduleCountOutputTypeArgs
  } 

  export type DailyScheduleGetPayload<S extends boolean | null | undefined | DailyScheduleArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DailySchedule :
    S extends undefined ? never :
    S extends { include: any } & (DailyScheduleArgs | DailyScheduleFindManyArgs)
    ? DailySchedule  & {
    [P in TrueKeys<S['include']>]:
        P extends 'dailyScheduleItems' ? Array < DailyScheduleItemGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'weeklyPlan' ? WeeklyPlanGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends '_count' ? DailyScheduleCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (DailyScheduleArgs | DailyScheduleFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'dailyScheduleItems' ? Array < DailyScheduleItemGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'weeklyPlan' ? WeeklyPlanGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends '_count' ? DailyScheduleCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof DailySchedule ? DailySchedule[P] : never
  } 
      : DailySchedule


  type DailyScheduleCountArgs = Merge<
    Omit<DailyScheduleFindManyArgs, 'select' | 'include'> & {
      select?: DailyScheduleCountAggregateInputType | true
    }
  >

  export interface DailyScheduleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one DailySchedule that matches the filter.
     * @param {DailyScheduleFindUniqueArgs} args - Arguments to find a DailySchedule
     * @example
     * // Get one DailySchedule
     * const dailySchedule = await prisma.dailySchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DailyScheduleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DailyScheduleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DailySchedule'> extends True ? Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>> : Prisma__DailyScheduleClient<DailyScheduleGetPayload<T> | null, null>

    /**
     * Find the first DailySchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleFindFirstArgs} args - Arguments to find a DailySchedule
     * @example
     * // Get one DailySchedule
     * const dailySchedule = await prisma.dailySchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DailyScheduleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DailyScheduleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DailySchedule'> extends True ? Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>> : Prisma__DailyScheduleClient<DailyScheduleGetPayload<T> | null, null>

    /**
     * Find zero or more DailySchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailySchedules
     * const dailySchedules = await prisma.dailySchedule.findMany()
     * 
     * // Get first 10 DailySchedules
     * const dailySchedules = await prisma.dailySchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyScheduleWithIdOnly = await prisma.dailySchedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DailyScheduleFindManyArgs>(
      args?: SelectSubset<T, DailyScheduleFindManyArgs>
    ): PrismaPromise<Array<DailyScheduleGetPayload<T>>>

    /**
     * Create a DailySchedule.
     * @param {DailyScheduleCreateArgs} args - Arguments to create a DailySchedule.
     * @example
     * // Create one DailySchedule
     * const DailySchedule = await prisma.dailySchedule.create({
     *   data: {
     *     // ... data to create a DailySchedule
     *   }
     * })
     * 
    **/
    create<T extends DailyScheduleCreateArgs>(
      args: SelectSubset<T, DailyScheduleCreateArgs>
    ): Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>>

    /**
     * Create many DailySchedules.
     *     @param {DailyScheduleCreateManyArgs} args - Arguments to create many DailySchedules.
     *     @example
     *     // Create many DailySchedules
     *     const dailySchedule = await prisma.dailySchedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DailyScheduleCreateManyArgs>(
      args?: SelectSubset<T, DailyScheduleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DailySchedule.
     * @param {DailyScheduleDeleteArgs} args - Arguments to delete one DailySchedule.
     * @example
     * // Delete one DailySchedule
     * const DailySchedule = await prisma.dailySchedule.delete({
     *   where: {
     *     // ... filter to delete one DailySchedule
     *   }
     * })
     * 
    **/
    delete<T extends DailyScheduleDeleteArgs>(
      args: SelectSubset<T, DailyScheduleDeleteArgs>
    ): Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>>

    /**
     * Update one DailySchedule.
     * @param {DailyScheduleUpdateArgs} args - Arguments to update one DailySchedule.
     * @example
     * // Update one DailySchedule
     * const dailySchedule = await prisma.dailySchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DailyScheduleUpdateArgs>(
      args: SelectSubset<T, DailyScheduleUpdateArgs>
    ): Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>>

    /**
     * Delete zero or more DailySchedules.
     * @param {DailyScheduleDeleteManyArgs} args - Arguments to filter DailySchedules to delete.
     * @example
     * // Delete a few DailySchedules
     * const { count } = await prisma.dailySchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DailyScheduleDeleteManyArgs>(
      args?: SelectSubset<T, DailyScheduleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailySchedules
     * const dailySchedule = await prisma.dailySchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DailyScheduleUpdateManyArgs>(
      args: SelectSubset<T, DailyScheduleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DailySchedule.
     * @param {DailyScheduleUpsertArgs} args - Arguments to update or create a DailySchedule.
     * @example
     * // Update or create a DailySchedule
     * const dailySchedule = await prisma.dailySchedule.upsert({
     *   create: {
     *     // ... data to create a DailySchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailySchedule we want to update
     *   }
     * })
    **/
    upsert<T extends DailyScheduleUpsertArgs>(
      args: SelectSubset<T, DailyScheduleUpsertArgs>
    ): Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>>

    /**
     * Find one DailySchedule that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DailyScheduleFindUniqueOrThrowArgs} args - Arguments to find a DailySchedule
     * @example
     * // Get one DailySchedule
     * const dailySchedule = await prisma.dailySchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DailyScheduleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DailyScheduleFindUniqueOrThrowArgs>
    ): Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>>

    /**
     * Find the first DailySchedule that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleFindFirstOrThrowArgs} args - Arguments to find a DailySchedule
     * @example
     * // Get one DailySchedule
     * const dailySchedule = await prisma.dailySchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DailyScheduleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DailyScheduleFindFirstOrThrowArgs>
    ): Prisma__DailyScheduleClient<DailyScheduleGetPayload<T>>

    /**
     * Count the number of DailySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleCountArgs} args - Arguments to filter DailySchedules to count.
     * @example
     * // Count the number of DailySchedules
     * const count = await prisma.dailySchedule.count({
     *   where: {
     *     // ... the filter for the DailySchedules we want to count
     *   }
     * })
    **/
    count<T extends DailyScheduleCountArgs>(
      args?: Subset<T, DailyScheduleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyScheduleAggregateArgs>(args: Subset<T, DailyScheduleAggregateArgs>): PrismaPromise<GetDailyScheduleAggregateType<T>>

    /**
     * Group by DailySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyScheduleGroupByArgs['orderBy'] }
        : { orderBy?: DailyScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyScheduleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DailySchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DailyScheduleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dailyScheduleItems<T extends DailyScheduleItemFindManyArgs= {}>(args?: Subset<T, DailyScheduleItemFindManyArgs>): PrismaPromise<Array<DailyScheduleItemGetPayload<T>>| Null>;

    weeklyPlan<T extends WeeklyPlanArgs= {}>(args?: Subset<T, WeeklyPlanArgs>): Prisma__WeeklyPlanClient<WeeklyPlanGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DailySchedule base type for findUnique actions
   */
  export type DailyScheduleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
    /**
     * Filter, which DailySchedule to fetch.
     * 
    **/
    where: DailyScheduleWhereUniqueInput
  }

  /**
   * DailySchedule: findUnique
   */
  export interface DailyScheduleFindUniqueArgs extends DailyScheduleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailySchedule base type for findFirst actions
   */
  export type DailyScheduleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
    /**
     * Filter, which DailySchedule to fetch.
     * 
    **/
    where?: DailyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailySchedules to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailySchedules.
     * 
    **/
    cursor?: DailyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailySchedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailySchedules.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailySchedules.
     * 
    **/
    distinct?: Enumerable<DailyScheduleScalarFieldEnum>
  }

  /**
   * DailySchedule: findFirst
   */
  export interface DailyScheduleFindFirstArgs extends DailyScheduleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailySchedule findMany
   */
  export type DailyScheduleFindManyArgs = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
    /**
     * Filter, which DailySchedules to fetch.
     * 
    **/
    where?: DailyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailySchedules to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailySchedules.
     * 
    **/
    cursor?: DailyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailySchedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailySchedules.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DailyScheduleScalarFieldEnum>
  }


  /**
   * DailySchedule create
   */
  export type DailyScheduleCreateArgs = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
    /**
     * The data needed to create a DailySchedule.
     * 
    **/
    data: XOR<DailyScheduleCreateInput, DailyScheduleUncheckedCreateInput>
  }


  /**
   * DailySchedule createMany
   */
  export type DailyScheduleCreateManyArgs = {
    /**
     * The data used to create many DailySchedules.
     * 
    **/
    data: Enumerable<DailyScheduleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DailySchedule update
   */
  export type DailyScheduleUpdateArgs = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
    /**
     * The data needed to update a DailySchedule.
     * 
    **/
    data: XOR<DailyScheduleUpdateInput, DailyScheduleUncheckedUpdateInput>
    /**
     * Choose, which DailySchedule to update.
     * 
    **/
    where: DailyScheduleWhereUniqueInput
  }


  /**
   * DailySchedule updateMany
   */
  export type DailyScheduleUpdateManyArgs = {
    /**
     * The data used to update DailySchedules.
     * 
    **/
    data: XOR<DailyScheduleUpdateManyMutationInput, DailyScheduleUncheckedUpdateManyInput>
    /**
     * Filter which DailySchedules to update
     * 
    **/
    where?: DailyScheduleWhereInput
  }


  /**
   * DailySchedule upsert
   */
  export type DailyScheduleUpsertArgs = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
    /**
     * The filter to search for the DailySchedule to update in case it exists.
     * 
    **/
    where: DailyScheduleWhereUniqueInput
    /**
     * In case the DailySchedule found by the `where` argument doesn't exist, create a new DailySchedule with this data.
     * 
    **/
    create: XOR<DailyScheduleCreateInput, DailyScheduleUncheckedCreateInput>
    /**
     * In case the DailySchedule was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DailyScheduleUpdateInput, DailyScheduleUncheckedUpdateInput>
  }


  /**
   * DailySchedule delete
   */
  export type DailyScheduleDeleteArgs = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
    /**
     * Filter which DailySchedule to delete.
     * 
    **/
    where: DailyScheduleWhereUniqueInput
  }


  /**
   * DailySchedule deleteMany
   */
  export type DailyScheduleDeleteManyArgs = {
    /**
     * Filter which DailySchedules to delete
     * 
    **/
    where?: DailyScheduleWhereInput
  }


  /**
   * DailySchedule: findUniqueOrThrow
   */
  export type DailyScheduleFindUniqueOrThrowArgs = DailyScheduleFindUniqueArgsBase
      

  /**
   * DailySchedule: findFirstOrThrow
   */
  export type DailyScheduleFindFirstOrThrowArgs = DailyScheduleFindFirstArgsBase
      

  /**
   * DailySchedule without action
   */
  export type DailyScheduleArgs = {
    /**
     * Select specific fields to fetch from the DailySchedule
     * 
    **/
    select?: DailyScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleInclude | null
  }



  /**
   * Model DailyScheduleItem
   */


  export type AggregateDailyScheduleItem = {
    _count: DailyScheduleItemCountAggregateOutputType | null
    _avg: DailyScheduleItemAvgAggregateOutputType | null
    _sum: DailyScheduleItemSumAggregateOutputType | null
    _min: DailyScheduleItemMinAggregateOutputType | null
    _max: DailyScheduleItemMaxAggregateOutputType | null
  }

  export type DailyScheduleItemAvgAggregateOutputType = {
    id: number | null
    dailyScheduleId: number | null
  }

  export type DailyScheduleItemSumAggregateOutputType = {
    id: number | null
    dailyScheduleId: number | null
  }

  export type DailyScheduleItemMinAggregateOutputType = {
    id: number | null
    time: Date | null
    planDescription: string | null
    dailyScheduleId: number | null
  }

  export type DailyScheduleItemMaxAggregateOutputType = {
    id: number | null
    time: Date | null
    planDescription: string | null
    dailyScheduleId: number | null
  }

  export type DailyScheduleItemCountAggregateOutputType = {
    id: number
    time: number
    planDescription: number
    dailyScheduleId: number
    _all: number
  }


  export type DailyScheduleItemAvgAggregateInputType = {
    id?: true
    dailyScheduleId?: true
  }

  export type DailyScheduleItemSumAggregateInputType = {
    id?: true
    dailyScheduleId?: true
  }

  export type DailyScheduleItemMinAggregateInputType = {
    id?: true
    time?: true
    planDescription?: true
    dailyScheduleId?: true
  }

  export type DailyScheduleItemMaxAggregateInputType = {
    id?: true
    time?: true
    planDescription?: true
    dailyScheduleId?: true
  }

  export type DailyScheduleItemCountAggregateInputType = {
    id?: true
    time?: true
    planDescription?: true
    dailyScheduleId?: true
    _all?: true
  }

  export type DailyScheduleItemAggregateArgs = {
    /**
     * Filter which DailyScheduleItem to aggregate.
     * 
    **/
    where?: DailyScheduleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyScheduleItems to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyScheduleItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DailyScheduleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyScheduleItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyScheduleItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyScheduleItems
    **/
    _count?: true | DailyScheduleItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyScheduleItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyScheduleItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyScheduleItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyScheduleItemMaxAggregateInputType
  }

  export type GetDailyScheduleItemAggregateType<T extends DailyScheduleItemAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyScheduleItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyScheduleItem[P]>
      : GetScalarType<T[P], AggregateDailyScheduleItem[P]>
  }




  export type DailyScheduleItemGroupByArgs = {
    where?: DailyScheduleItemWhereInput
    orderBy?: Enumerable<DailyScheduleItemOrderByWithAggregationInput>
    by: Array<DailyScheduleItemScalarFieldEnum>
    having?: DailyScheduleItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyScheduleItemCountAggregateInputType | true
    _avg?: DailyScheduleItemAvgAggregateInputType
    _sum?: DailyScheduleItemSumAggregateInputType
    _min?: DailyScheduleItemMinAggregateInputType
    _max?: DailyScheduleItemMaxAggregateInputType
  }


  export type DailyScheduleItemGroupByOutputType = {
    id: number
    time: Date
    planDescription: string
    dailyScheduleId: number
    _count: DailyScheduleItemCountAggregateOutputType | null
    _avg: DailyScheduleItemAvgAggregateOutputType | null
    _sum: DailyScheduleItemSumAggregateOutputType | null
    _min: DailyScheduleItemMinAggregateOutputType | null
    _max: DailyScheduleItemMaxAggregateOutputType | null
  }

  type GetDailyScheduleItemGroupByPayload<T extends DailyScheduleItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DailyScheduleItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyScheduleItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyScheduleItemGroupByOutputType[P]>
            : GetScalarType<T[P], DailyScheduleItemGroupByOutputType[P]>
        }
      >
    >


  export type DailyScheduleItemSelect = {
    id?: boolean
    time?: boolean
    planDescription?: boolean
    dailyScheduleId?: boolean
    dailySchedule?: boolean | DailyScheduleArgs
  }


  export type DailyScheduleItemInclude = {
    dailySchedule?: boolean | DailyScheduleArgs
  } 

  export type DailyScheduleItemGetPayload<S extends boolean | null | undefined | DailyScheduleItemArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DailyScheduleItem :
    S extends undefined ? never :
    S extends { include: any } & (DailyScheduleItemArgs | DailyScheduleItemFindManyArgs)
    ? DailyScheduleItem  & {
    [P in TrueKeys<S['include']>]:
        P extends 'dailySchedule' ? DailyScheduleGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (DailyScheduleItemArgs | DailyScheduleItemFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'dailySchedule' ? DailyScheduleGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof DailyScheduleItem ? DailyScheduleItem[P] : never
  } 
      : DailyScheduleItem


  type DailyScheduleItemCountArgs = Merge<
    Omit<DailyScheduleItemFindManyArgs, 'select' | 'include'> & {
      select?: DailyScheduleItemCountAggregateInputType | true
    }
  >

  export interface DailyScheduleItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one DailyScheduleItem that matches the filter.
     * @param {DailyScheduleItemFindUniqueArgs} args - Arguments to find a DailyScheduleItem
     * @example
     * // Get one DailyScheduleItem
     * const dailyScheduleItem = await prisma.dailyScheduleItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DailyScheduleItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DailyScheduleItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DailyScheduleItem'> extends True ? Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>> : Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T> | null, null>

    /**
     * Find the first DailyScheduleItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleItemFindFirstArgs} args - Arguments to find a DailyScheduleItem
     * @example
     * // Get one DailyScheduleItem
     * const dailyScheduleItem = await prisma.dailyScheduleItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DailyScheduleItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DailyScheduleItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DailyScheduleItem'> extends True ? Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>> : Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T> | null, null>

    /**
     * Find zero or more DailyScheduleItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyScheduleItems
     * const dailyScheduleItems = await prisma.dailyScheduleItem.findMany()
     * 
     * // Get first 10 DailyScheduleItems
     * const dailyScheduleItems = await prisma.dailyScheduleItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyScheduleItemWithIdOnly = await prisma.dailyScheduleItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DailyScheduleItemFindManyArgs>(
      args?: SelectSubset<T, DailyScheduleItemFindManyArgs>
    ): PrismaPromise<Array<DailyScheduleItemGetPayload<T>>>

    /**
     * Create a DailyScheduleItem.
     * @param {DailyScheduleItemCreateArgs} args - Arguments to create a DailyScheduleItem.
     * @example
     * // Create one DailyScheduleItem
     * const DailyScheduleItem = await prisma.dailyScheduleItem.create({
     *   data: {
     *     // ... data to create a DailyScheduleItem
     *   }
     * })
     * 
    **/
    create<T extends DailyScheduleItemCreateArgs>(
      args: SelectSubset<T, DailyScheduleItemCreateArgs>
    ): Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>>

    /**
     * Create many DailyScheduleItems.
     *     @param {DailyScheduleItemCreateManyArgs} args - Arguments to create many DailyScheduleItems.
     *     @example
     *     // Create many DailyScheduleItems
     *     const dailyScheduleItem = await prisma.dailyScheduleItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DailyScheduleItemCreateManyArgs>(
      args?: SelectSubset<T, DailyScheduleItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DailyScheduleItem.
     * @param {DailyScheduleItemDeleteArgs} args - Arguments to delete one DailyScheduleItem.
     * @example
     * // Delete one DailyScheduleItem
     * const DailyScheduleItem = await prisma.dailyScheduleItem.delete({
     *   where: {
     *     // ... filter to delete one DailyScheduleItem
     *   }
     * })
     * 
    **/
    delete<T extends DailyScheduleItemDeleteArgs>(
      args: SelectSubset<T, DailyScheduleItemDeleteArgs>
    ): Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>>

    /**
     * Update one DailyScheduleItem.
     * @param {DailyScheduleItemUpdateArgs} args - Arguments to update one DailyScheduleItem.
     * @example
     * // Update one DailyScheduleItem
     * const dailyScheduleItem = await prisma.dailyScheduleItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DailyScheduleItemUpdateArgs>(
      args: SelectSubset<T, DailyScheduleItemUpdateArgs>
    ): Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>>

    /**
     * Delete zero or more DailyScheduleItems.
     * @param {DailyScheduleItemDeleteManyArgs} args - Arguments to filter DailyScheduleItems to delete.
     * @example
     * // Delete a few DailyScheduleItems
     * const { count } = await prisma.dailyScheduleItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DailyScheduleItemDeleteManyArgs>(
      args?: SelectSubset<T, DailyScheduleItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyScheduleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyScheduleItems
     * const dailyScheduleItem = await prisma.dailyScheduleItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DailyScheduleItemUpdateManyArgs>(
      args: SelectSubset<T, DailyScheduleItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DailyScheduleItem.
     * @param {DailyScheduleItemUpsertArgs} args - Arguments to update or create a DailyScheduleItem.
     * @example
     * // Update or create a DailyScheduleItem
     * const dailyScheduleItem = await prisma.dailyScheduleItem.upsert({
     *   create: {
     *     // ... data to create a DailyScheduleItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyScheduleItem we want to update
     *   }
     * })
    **/
    upsert<T extends DailyScheduleItemUpsertArgs>(
      args: SelectSubset<T, DailyScheduleItemUpsertArgs>
    ): Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>>

    /**
     * Find one DailyScheduleItem that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DailyScheduleItemFindUniqueOrThrowArgs} args - Arguments to find a DailyScheduleItem
     * @example
     * // Get one DailyScheduleItem
     * const dailyScheduleItem = await prisma.dailyScheduleItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DailyScheduleItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DailyScheduleItemFindUniqueOrThrowArgs>
    ): Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>>

    /**
     * Find the first DailyScheduleItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleItemFindFirstOrThrowArgs} args - Arguments to find a DailyScheduleItem
     * @example
     * // Get one DailyScheduleItem
     * const dailyScheduleItem = await prisma.dailyScheduleItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DailyScheduleItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DailyScheduleItemFindFirstOrThrowArgs>
    ): Prisma__DailyScheduleItemClient<DailyScheduleItemGetPayload<T>>

    /**
     * Count the number of DailyScheduleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleItemCountArgs} args - Arguments to filter DailyScheduleItems to count.
     * @example
     * // Count the number of DailyScheduleItems
     * const count = await prisma.dailyScheduleItem.count({
     *   where: {
     *     // ... the filter for the DailyScheduleItems we want to count
     *   }
     * })
    **/
    count<T extends DailyScheduleItemCountArgs>(
      args?: Subset<T, DailyScheduleItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyScheduleItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyScheduleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyScheduleItemAggregateArgs>(args: Subset<T, DailyScheduleItemAggregateArgs>): PrismaPromise<GetDailyScheduleItemAggregateType<T>>

    /**
     * Group by DailyScheduleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyScheduleItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyScheduleItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyScheduleItemGroupByArgs['orderBy'] }
        : { orderBy?: DailyScheduleItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyScheduleItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyScheduleItemGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyScheduleItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DailyScheduleItemClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dailySchedule<T extends DailyScheduleArgs= {}>(args?: Subset<T, DailyScheduleArgs>): Prisma__DailyScheduleClient<DailyScheduleGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DailyScheduleItem base type for findUnique actions
   */
  export type DailyScheduleItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
    /**
     * Filter, which DailyScheduleItem to fetch.
     * 
    **/
    where: DailyScheduleItemWhereUniqueInput
  }

  /**
   * DailyScheduleItem: findUnique
   */
  export interface DailyScheduleItemFindUniqueArgs extends DailyScheduleItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailyScheduleItem base type for findFirst actions
   */
  export type DailyScheduleItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
    /**
     * Filter, which DailyScheduleItem to fetch.
     * 
    **/
    where?: DailyScheduleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyScheduleItems to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyScheduleItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyScheduleItems.
     * 
    **/
    cursor?: DailyScheduleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyScheduleItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyScheduleItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyScheduleItems.
     * 
    **/
    distinct?: Enumerable<DailyScheduleItemScalarFieldEnum>
  }

  /**
   * DailyScheduleItem: findFirst
   */
  export interface DailyScheduleItemFindFirstArgs extends DailyScheduleItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DailyScheduleItem findMany
   */
  export type DailyScheduleItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
    /**
     * Filter, which DailyScheduleItems to fetch.
     * 
    **/
    where?: DailyScheduleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyScheduleItems to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyScheduleItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyScheduleItems.
     * 
    **/
    cursor?: DailyScheduleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyScheduleItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyScheduleItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DailyScheduleItemScalarFieldEnum>
  }


  /**
   * DailyScheduleItem create
   */
  export type DailyScheduleItemCreateArgs = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
    /**
     * The data needed to create a DailyScheduleItem.
     * 
    **/
    data: XOR<DailyScheduleItemCreateInput, DailyScheduleItemUncheckedCreateInput>
  }


  /**
   * DailyScheduleItem createMany
   */
  export type DailyScheduleItemCreateManyArgs = {
    /**
     * The data used to create many DailyScheduleItems.
     * 
    **/
    data: Enumerable<DailyScheduleItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DailyScheduleItem update
   */
  export type DailyScheduleItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
    /**
     * The data needed to update a DailyScheduleItem.
     * 
    **/
    data: XOR<DailyScheduleItemUpdateInput, DailyScheduleItemUncheckedUpdateInput>
    /**
     * Choose, which DailyScheduleItem to update.
     * 
    **/
    where: DailyScheduleItemWhereUniqueInput
  }


  /**
   * DailyScheduleItem updateMany
   */
  export type DailyScheduleItemUpdateManyArgs = {
    /**
     * The data used to update DailyScheduleItems.
     * 
    **/
    data: XOR<DailyScheduleItemUpdateManyMutationInput, DailyScheduleItemUncheckedUpdateManyInput>
    /**
     * Filter which DailyScheduleItems to update
     * 
    **/
    where?: DailyScheduleItemWhereInput
  }


  /**
   * DailyScheduleItem upsert
   */
  export type DailyScheduleItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
    /**
     * The filter to search for the DailyScheduleItem to update in case it exists.
     * 
    **/
    where: DailyScheduleItemWhereUniqueInput
    /**
     * In case the DailyScheduleItem found by the `where` argument doesn't exist, create a new DailyScheduleItem with this data.
     * 
    **/
    create: XOR<DailyScheduleItemCreateInput, DailyScheduleItemUncheckedCreateInput>
    /**
     * In case the DailyScheduleItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DailyScheduleItemUpdateInput, DailyScheduleItemUncheckedUpdateInput>
  }


  /**
   * DailyScheduleItem delete
   */
  export type DailyScheduleItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
    /**
     * Filter which DailyScheduleItem to delete.
     * 
    **/
    where: DailyScheduleItemWhereUniqueInput
  }


  /**
   * DailyScheduleItem deleteMany
   */
  export type DailyScheduleItemDeleteManyArgs = {
    /**
     * Filter which DailyScheduleItems to delete
     * 
    **/
    where?: DailyScheduleItemWhereInput
  }


  /**
   * DailyScheduleItem: findUniqueOrThrow
   */
  export type DailyScheduleItemFindUniqueOrThrowArgs = DailyScheduleItemFindUniqueArgsBase
      

  /**
   * DailyScheduleItem: findFirstOrThrow
   */
  export type DailyScheduleItemFindFirstOrThrowArgs = DailyScheduleItemFindFirstArgsBase
      

  /**
   * DailyScheduleItem without action
   */
  export type DailyScheduleItemArgs = {
    /**
     * Select specific fields to fetch from the DailyScheduleItem
     * 
    **/
    select?: DailyScheduleItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyScheduleItemInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BookScalarFieldEnum: {
    id: 'id',
    title: 'title',
    author: 'author',
    weeklyPlanId: 'weeklyPlanId'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const DailyScheduleItemScalarFieldEnum: {
    id: 'id',
    time: 'time',
    planDescription: 'planDescription',
    dailyScheduleId: 'dailyScheduleId'
  };

  export type DailyScheduleItemScalarFieldEnum = (typeof DailyScheduleItemScalarFieldEnum)[keyof typeof DailyScheduleItemScalarFieldEnum]


  export const DailyScheduleScalarFieldEnum: {
    id: 'id',
    date: 'date',
    weeklyPlanId: 'weeklyPlanId'
  };

  export type DailyScheduleScalarFieldEnum = (typeof DailyScheduleScalarFieldEnum)[keyof typeof DailyScheduleScalarFieldEnum]


  export const LearningFocusScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    studentId: 'studentId'
  };

  export type LearningFocusScalarFieldEnum = (typeof LearningFocusScalarFieldEnum)[keyof typeof LearningFocusScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StudentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WeeklyPlanScalarFieldEnum: {
    id: 'id',
    startDate: 'startDate',
    endDate: 'endDate',
    resourcesNeeded: 'resourcesNeeded',
    activities: 'activities'
  };

  export type WeeklyPlanScalarFieldEnum = (typeof WeeklyPlanScalarFieldEnum)[keyof typeof WeeklyPlanScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type StudentWhereInput = {
    AND?: Enumerable<StudentWhereInput>
    OR?: Enumerable<StudentWhereInput>
    NOT?: Enumerable<StudentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    learningFocuses?: LearningFocusListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    learningFocuses?: LearningFocusOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = {
    id?: number
  }

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StudentScalarWhereWithAggregatesInput>
    OR?: Enumerable<StudentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StudentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LearningFocusWhereInput = {
    AND?: Enumerable<LearningFocusWhereInput>
    OR?: Enumerable<LearningFocusWhereInput>
    NOT?: Enumerable<LearningFocusWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    studentId?: IntFilter | number
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type LearningFocusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    studentId?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type LearningFocusWhereUniqueInput = {
    id?: number
  }

  export type LearningFocusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    studentId?: SortOrder
    _count?: LearningFocusCountOrderByAggregateInput
    _avg?: LearningFocusAvgOrderByAggregateInput
    _max?: LearningFocusMaxOrderByAggregateInput
    _min?: LearningFocusMinOrderByAggregateInput
    _sum?: LearningFocusSumOrderByAggregateInput
  }

  export type LearningFocusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LearningFocusScalarWhereWithAggregatesInput>
    OR?: Enumerable<LearningFocusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LearningFocusScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    studentId?: IntWithAggregatesFilter | number
  }

  export type WeeklyPlanWhereInput = {
    AND?: Enumerable<WeeklyPlanWhereInput>
    OR?: Enumerable<WeeklyPlanWhereInput>
    NOT?: Enumerable<WeeklyPlanWhereInput>
    id?: IntFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    books?: BookListRelationFilter
    resourcesNeeded?: StringNullableListFilter
    activities?: StringNullableListFilter
    dailySchedules?: DailyScheduleListRelationFilter
  }

  export type WeeklyPlanOrderByWithRelationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    books?: BookOrderByRelationAggregateInput
    resourcesNeeded?: SortOrder
    activities?: SortOrder
    dailySchedules?: DailyScheduleOrderByRelationAggregateInput
  }

  export type WeeklyPlanWhereUniqueInput = {
    id?: number
  }

  export type WeeklyPlanOrderByWithAggregationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    resourcesNeeded?: SortOrder
    activities?: SortOrder
    _count?: WeeklyPlanCountOrderByAggregateInput
    _avg?: WeeklyPlanAvgOrderByAggregateInput
    _max?: WeeklyPlanMaxOrderByAggregateInput
    _min?: WeeklyPlanMinOrderByAggregateInput
    _sum?: WeeklyPlanSumOrderByAggregateInput
  }

  export type WeeklyPlanScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WeeklyPlanScalarWhereWithAggregatesInput>
    OR?: Enumerable<WeeklyPlanScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WeeklyPlanScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    resourcesNeeded?: StringNullableListFilter
    activities?: StringNullableListFilter
  }

  export type BookWhereInput = {
    AND?: Enumerable<BookWhereInput>
    OR?: Enumerable<BookWhereInput>
    NOT?: Enumerable<BookWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    author?: StringFilter | string
    weeklyPlanId?: IntFilter | number
    weeklyPlan?: XOR<WeeklyPlanRelationFilter, WeeklyPlanWhereInput>
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    weeklyPlanId?: SortOrder
    weeklyPlan?: WeeklyPlanOrderByWithRelationInput
  }

  export type BookWhereUniqueInput = {
    id?: number
  }

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    weeklyPlanId?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _avg?: BookAvgOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
    _sum?: BookSumOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    author?: StringWithAggregatesFilter | string
    weeklyPlanId?: IntWithAggregatesFilter | number
  }

  export type DailyScheduleWhereInput = {
    AND?: Enumerable<DailyScheduleWhereInput>
    OR?: Enumerable<DailyScheduleWhereInput>
    NOT?: Enumerable<DailyScheduleWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    dailyScheduleItems?: DailyScheduleItemListRelationFilter
    weeklyPlanId?: IntFilter | number
    weeklyPlan?: XOR<WeeklyPlanRelationFilter, WeeklyPlanWhereInput>
  }

  export type DailyScheduleOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    dailyScheduleItems?: DailyScheduleItemOrderByRelationAggregateInput
    weeklyPlanId?: SortOrder
    weeklyPlan?: WeeklyPlanOrderByWithRelationInput
  }

  export type DailyScheduleWhereUniqueInput = {
    id?: number
  }

  export type DailyScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    weeklyPlanId?: SortOrder
    _count?: DailyScheduleCountOrderByAggregateInput
    _avg?: DailyScheduleAvgOrderByAggregateInput
    _max?: DailyScheduleMaxOrderByAggregateInput
    _min?: DailyScheduleMinOrderByAggregateInput
    _sum?: DailyScheduleSumOrderByAggregateInput
  }

  export type DailyScheduleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DailyScheduleScalarWhereWithAggregatesInput>
    OR?: Enumerable<DailyScheduleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DailyScheduleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    weeklyPlanId?: IntWithAggregatesFilter | number
  }

  export type DailyScheduleItemWhereInput = {
    AND?: Enumerable<DailyScheduleItemWhereInput>
    OR?: Enumerable<DailyScheduleItemWhereInput>
    NOT?: Enumerable<DailyScheduleItemWhereInput>
    id?: IntFilter | number
    time?: DateTimeFilter | Date | string
    planDescription?: StringFilter | string
    dailyScheduleId?: IntFilter | number
    dailySchedule?: XOR<DailyScheduleRelationFilter, DailyScheduleWhereInput>
  }

  export type DailyScheduleItemOrderByWithRelationInput = {
    id?: SortOrder
    time?: SortOrder
    planDescription?: SortOrder
    dailyScheduleId?: SortOrder
    dailySchedule?: DailyScheduleOrderByWithRelationInput
  }

  export type DailyScheduleItemWhereUniqueInput = {
    id?: number
  }

  export type DailyScheduleItemOrderByWithAggregationInput = {
    id?: SortOrder
    time?: SortOrder
    planDescription?: SortOrder
    dailyScheduleId?: SortOrder
    _count?: DailyScheduleItemCountOrderByAggregateInput
    _avg?: DailyScheduleItemAvgOrderByAggregateInput
    _max?: DailyScheduleItemMaxOrderByAggregateInput
    _min?: DailyScheduleItemMinOrderByAggregateInput
    _sum?: DailyScheduleItemSumOrderByAggregateInput
  }

  export type DailyScheduleItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DailyScheduleItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<DailyScheduleItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DailyScheduleItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    time?: DateTimeWithAggregatesFilter | Date | string
    planDescription?: StringWithAggregatesFilter | string
    dailyScheduleId?: IntWithAggregatesFilter | number
  }

  export type StudentCreateInput = {
    name: string
    createdAt?: Date | string
    learningFocuses?: LearningFocusCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    learningFocuses?: LearningFocusUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningFocuses?: LearningFocusUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningFocuses?: LearningFocusUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningFocusCreateInput = {
    name: string
    description: string
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutLearningFocusesInput
  }

  export type LearningFocusUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    studentId: number
  }

  export type LearningFocusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutLearningFocusesNestedInput
  }

  export type LearningFocusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type LearningFocusCreateManyInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    studentId: number
  }

  export type LearningFocusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningFocusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyPlanCreateInput = {
    startDate: Date | string
    endDate: Date | string
    books?: BookCreateNestedManyWithoutWeeklyPlanInput
    resourcesNeeded?: WeeklyPlanCreateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanCreateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleCreateNestedManyWithoutWeeklyPlanInput
  }

  export type WeeklyPlanUncheckedCreateInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    books?: BookUncheckedCreateNestedManyWithoutWeeklyPlanInput
    resourcesNeeded?: WeeklyPlanCreateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanCreateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleUncheckedCreateNestedManyWithoutWeeklyPlanInput
  }

  export type WeeklyPlanUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: BookUpdateManyWithoutWeeklyPlanNestedInput
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleUpdateManyWithoutWeeklyPlanNestedInput
  }

  export type WeeklyPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: BookUncheckedUpdateManyWithoutWeeklyPlanNestedInput
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleUncheckedUpdateManyWithoutWeeklyPlanNestedInput
  }

  export type WeeklyPlanCreateManyInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    resourcesNeeded?: WeeklyPlanCreateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanCreateactivitiesInput | Enumerable<string>
  }

  export type WeeklyPlanUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
  }

  export type WeeklyPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
  }

  export type BookCreateInput = {
    title: string
    author: string
    weeklyPlan: WeeklyPlanCreateNestedOneWithoutBooksInput
  }

  export type BookUncheckedCreateInput = {
    id?: number
    title: string
    author: string
    weeklyPlanId: number
  }

  export type BookUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    weeklyPlan?: WeeklyPlanUpdateOneRequiredWithoutBooksNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    weeklyPlanId?: IntFieldUpdateOperationsInput | number
  }

  export type BookCreateManyInput = {
    id?: number
    title: string
    author: string
    weeklyPlanId: number
  }

  export type BookUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    weeklyPlanId?: IntFieldUpdateOperationsInput | number
  }

  export type DailyScheduleCreateInput = {
    date: Date | string
    dailyScheduleItems?: DailyScheduleItemCreateNestedManyWithoutDailyScheduleInput
    weeklyPlan: WeeklyPlanCreateNestedOneWithoutDailySchedulesInput
  }

  export type DailyScheduleUncheckedCreateInput = {
    id?: number
    date: Date | string
    dailyScheduleItems?: DailyScheduleItemUncheckedCreateNestedManyWithoutDailyScheduleInput
    weeklyPlanId: number
  }

  export type DailyScheduleUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyScheduleItems?: DailyScheduleItemUpdateManyWithoutDailyScheduleNestedInput
    weeklyPlan?: WeeklyPlanUpdateOneRequiredWithoutDailySchedulesNestedInput
  }

  export type DailyScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyScheduleItems?: DailyScheduleItemUncheckedUpdateManyWithoutDailyScheduleNestedInput
    weeklyPlanId?: IntFieldUpdateOperationsInput | number
  }

  export type DailyScheduleCreateManyInput = {
    id?: number
    date: Date | string
    weeklyPlanId: number
  }

  export type DailyScheduleUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weeklyPlanId?: IntFieldUpdateOperationsInput | number
  }

  export type DailyScheduleItemCreateInput = {
    time: Date | string
    planDescription: string
    dailySchedule: DailyScheduleCreateNestedOneWithoutDailyScheduleItemsInput
  }

  export type DailyScheduleItemUncheckedCreateInput = {
    id?: number
    time: Date | string
    planDescription: string
    dailyScheduleId: number
  }

  export type DailyScheduleItemUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    planDescription?: StringFieldUpdateOperationsInput | string
    dailySchedule?: DailyScheduleUpdateOneRequiredWithoutDailyScheduleItemsNestedInput
  }

  export type DailyScheduleItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    planDescription?: StringFieldUpdateOperationsInput | string
    dailyScheduleId?: IntFieldUpdateOperationsInput | number
  }

  export type DailyScheduleItemCreateManyInput = {
    id?: number
    time: Date | string
    planDescription: string
    dailyScheduleId: number
  }

  export type DailyScheduleItemUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    planDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DailyScheduleItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    planDescription?: StringFieldUpdateOperationsInput | string
    dailyScheduleId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type LearningFocusListRelationFilter = {
    every?: LearningFocusWhereInput
    some?: LearningFocusWhereInput
    none?: LearningFocusWhereInput
  }

  export type LearningFocusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type LearningFocusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    studentId?: SortOrder
  }

  export type LearningFocusAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
  }

  export type LearningFocusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    studentId?: SortOrder
  }

  export type LearningFocusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    studentId?: SortOrder
  }

  export type LearningFocusSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
  }

  export type BookListRelationFilter = {
    every?: BookWhereInput
    some?: BookWhereInput
    none?: BookWhereInput
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DailyScheduleListRelationFilter = {
    every?: DailyScheduleWhereInput
    some?: DailyScheduleWhereInput
    none?: DailyScheduleWhereInput
  }

  export type BookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeeklyPlanCountOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    resourcesNeeded?: SortOrder
    activities?: SortOrder
  }

  export type WeeklyPlanAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeeklyPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type WeeklyPlanMinOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type WeeklyPlanSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeeklyPlanRelationFilter = {
    is?: WeeklyPlanWhereInput
    isNot?: WeeklyPlanWhereInput
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type BookAvgOrderByAggregateInput = {
    id?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type BookSumOrderByAggregateInput = {
    id?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type DailyScheduleItemListRelationFilter = {
    every?: DailyScheduleItemWhereInput
    some?: DailyScheduleItemWhereInput
    none?: DailyScheduleItemWhereInput
  }

  export type DailyScheduleItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type DailyScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type DailyScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type DailyScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type DailyScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    weeklyPlanId?: SortOrder
  }

  export type DailyScheduleRelationFilter = {
    is?: DailyScheduleWhereInput
    isNot?: DailyScheduleWhereInput
  }

  export type DailyScheduleItemCountOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    planDescription?: SortOrder
    dailyScheduleId?: SortOrder
  }

  export type DailyScheduleItemAvgOrderByAggregateInput = {
    id?: SortOrder
    dailyScheduleId?: SortOrder
  }

  export type DailyScheduleItemMaxOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    planDescription?: SortOrder
    dailyScheduleId?: SortOrder
  }

  export type DailyScheduleItemMinOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    planDescription?: SortOrder
    dailyScheduleId?: SortOrder
  }

  export type DailyScheduleItemSumOrderByAggregateInput = {
    id?: SortOrder
    dailyScheduleId?: SortOrder
  }

  export type LearningFocusCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<LearningFocusCreateWithoutStudentInput>, Enumerable<LearningFocusUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LearningFocusCreateOrConnectWithoutStudentInput>
    createMany?: LearningFocusCreateManyStudentInputEnvelope
    connect?: Enumerable<LearningFocusWhereUniqueInput>
  }

  export type LearningFocusUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<LearningFocusCreateWithoutStudentInput>, Enumerable<LearningFocusUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LearningFocusCreateOrConnectWithoutStudentInput>
    createMany?: LearningFocusCreateManyStudentInputEnvelope
    connect?: Enumerable<LearningFocusWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LearningFocusUpdateManyWithoutStudentNestedInput = {
    create?: XOR<Enumerable<LearningFocusCreateWithoutStudentInput>, Enumerable<LearningFocusUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LearningFocusCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<LearningFocusUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: LearningFocusCreateManyStudentInputEnvelope
    set?: Enumerable<LearningFocusWhereUniqueInput>
    disconnect?: Enumerable<LearningFocusWhereUniqueInput>
    delete?: Enumerable<LearningFocusWhereUniqueInput>
    connect?: Enumerable<LearningFocusWhereUniqueInput>
    update?: Enumerable<LearningFocusUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<LearningFocusUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<LearningFocusScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LearningFocusUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<Enumerable<LearningFocusCreateWithoutStudentInput>, Enumerable<LearningFocusUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LearningFocusCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<LearningFocusUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: LearningFocusCreateManyStudentInputEnvelope
    set?: Enumerable<LearningFocusWhereUniqueInput>
    disconnect?: Enumerable<LearningFocusWhereUniqueInput>
    delete?: Enumerable<LearningFocusWhereUniqueInput>
    connect?: Enumerable<LearningFocusWhereUniqueInput>
    update?: Enumerable<LearningFocusUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<LearningFocusUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<LearningFocusScalarWhereInput>
  }

  export type StudentCreateNestedOneWithoutLearningFocusesInput = {
    create?: XOR<StudentCreateWithoutLearningFocusesInput, StudentUncheckedCreateWithoutLearningFocusesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutLearningFocusesInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutLearningFocusesNestedInput = {
    create?: XOR<StudentCreateWithoutLearningFocusesInput, StudentUncheckedCreateWithoutLearningFocusesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutLearningFocusesInput
    upsert?: StudentUpsertWithoutLearningFocusesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<StudentUpdateWithoutLearningFocusesInput, StudentUncheckedUpdateWithoutLearningFocusesInput>
  }

  export type BookCreateNestedManyWithoutWeeklyPlanInput = {
    create?: XOR<Enumerable<BookCreateWithoutWeeklyPlanInput>, Enumerable<BookUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutWeeklyPlanInput>
    createMany?: BookCreateManyWeeklyPlanInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type WeeklyPlanCreateresourcesNeededInput = {
    set: Enumerable<string>
  }

  export type WeeklyPlanCreateactivitiesInput = {
    set: Enumerable<string>
  }

  export type DailyScheduleCreateNestedManyWithoutWeeklyPlanInput = {
    create?: XOR<Enumerable<DailyScheduleCreateWithoutWeeklyPlanInput>, Enumerable<DailyScheduleUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<DailyScheduleCreateOrConnectWithoutWeeklyPlanInput>
    createMany?: DailyScheduleCreateManyWeeklyPlanInputEnvelope
    connect?: Enumerable<DailyScheduleWhereUniqueInput>
  }

  export type BookUncheckedCreateNestedManyWithoutWeeklyPlanInput = {
    create?: XOR<Enumerable<BookCreateWithoutWeeklyPlanInput>, Enumerable<BookUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutWeeklyPlanInput>
    createMany?: BookCreateManyWeeklyPlanInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type DailyScheduleUncheckedCreateNestedManyWithoutWeeklyPlanInput = {
    create?: XOR<Enumerable<DailyScheduleCreateWithoutWeeklyPlanInput>, Enumerable<DailyScheduleUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<DailyScheduleCreateOrConnectWithoutWeeklyPlanInput>
    createMany?: DailyScheduleCreateManyWeeklyPlanInputEnvelope
    connect?: Enumerable<DailyScheduleWhereUniqueInput>
  }

  export type BookUpdateManyWithoutWeeklyPlanNestedInput = {
    create?: XOR<Enumerable<BookCreateWithoutWeeklyPlanInput>, Enumerable<BookUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutWeeklyPlanInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutWeeklyPlanInput>
    createMany?: BookCreateManyWeeklyPlanInputEnvelope
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    connect?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutWeeklyPlanInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutWeeklyPlanInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type WeeklyPlanUpdateresourcesNeededInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type WeeklyPlanUpdateactivitiesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DailyScheduleUpdateManyWithoutWeeklyPlanNestedInput = {
    create?: XOR<Enumerable<DailyScheduleCreateWithoutWeeklyPlanInput>, Enumerable<DailyScheduleUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<DailyScheduleCreateOrConnectWithoutWeeklyPlanInput>
    upsert?: Enumerable<DailyScheduleUpsertWithWhereUniqueWithoutWeeklyPlanInput>
    createMany?: DailyScheduleCreateManyWeeklyPlanInputEnvelope
    set?: Enumerable<DailyScheduleWhereUniqueInput>
    disconnect?: Enumerable<DailyScheduleWhereUniqueInput>
    delete?: Enumerable<DailyScheduleWhereUniqueInput>
    connect?: Enumerable<DailyScheduleWhereUniqueInput>
    update?: Enumerable<DailyScheduleUpdateWithWhereUniqueWithoutWeeklyPlanInput>
    updateMany?: Enumerable<DailyScheduleUpdateManyWithWhereWithoutWeeklyPlanInput>
    deleteMany?: Enumerable<DailyScheduleScalarWhereInput>
  }

  export type BookUncheckedUpdateManyWithoutWeeklyPlanNestedInput = {
    create?: XOR<Enumerable<BookCreateWithoutWeeklyPlanInput>, Enumerable<BookUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutWeeklyPlanInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutWeeklyPlanInput>
    createMany?: BookCreateManyWeeklyPlanInputEnvelope
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    connect?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutWeeklyPlanInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutWeeklyPlanInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type DailyScheduleUncheckedUpdateManyWithoutWeeklyPlanNestedInput = {
    create?: XOR<Enumerable<DailyScheduleCreateWithoutWeeklyPlanInput>, Enumerable<DailyScheduleUncheckedCreateWithoutWeeklyPlanInput>>
    connectOrCreate?: Enumerable<DailyScheduleCreateOrConnectWithoutWeeklyPlanInput>
    upsert?: Enumerable<DailyScheduleUpsertWithWhereUniqueWithoutWeeklyPlanInput>
    createMany?: DailyScheduleCreateManyWeeklyPlanInputEnvelope
    set?: Enumerable<DailyScheduleWhereUniqueInput>
    disconnect?: Enumerable<DailyScheduleWhereUniqueInput>
    delete?: Enumerable<DailyScheduleWhereUniqueInput>
    connect?: Enumerable<DailyScheduleWhereUniqueInput>
    update?: Enumerable<DailyScheduleUpdateWithWhereUniqueWithoutWeeklyPlanInput>
    updateMany?: Enumerable<DailyScheduleUpdateManyWithWhereWithoutWeeklyPlanInput>
    deleteMany?: Enumerable<DailyScheduleScalarWhereInput>
  }

  export type WeeklyPlanCreateNestedOneWithoutBooksInput = {
    create?: XOR<WeeklyPlanCreateWithoutBooksInput, WeeklyPlanUncheckedCreateWithoutBooksInput>
    connectOrCreate?: WeeklyPlanCreateOrConnectWithoutBooksInput
    connect?: WeeklyPlanWhereUniqueInput
  }

  export type WeeklyPlanUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<WeeklyPlanCreateWithoutBooksInput, WeeklyPlanUncheckedCreateWithoutBooksInput>
    connectOrCreate?: WeeklyPlanCreateOrConnectWithoutBooksInput
    upsert?: WeeklyPlanUpsertWithoutBooksInput
    connect?: WeeklyPlanWhereUniqueInput
    update?: XOR<WeeklyPlanUpdateWithoutBooksInput, WeeklyPlanUncheckedUpdateWithoutBooksInput>
  }

  export type DailyScheduleItemCreateNestedManyWithoutDailyScheduleInput = {
    create?: XOR<Enumerable<DailyScheduleItemCreateWithoutDailyScheduleInput>, Enumerable<DailyScheduleItemUncheckedCreateWithoutDailyScheduleInput>>
    connectOrCreate?: Enumerable<DailyScheduleItemCreateOrConnectWithoutDailyScheduleInput>
    createMany?: DailyScheduleItemCreateManyDailyScheduleInputEnvelope
    connect?: Enumerable<DailyScheduleItemWhereUniqueInput>
  }

  export type WeeklyPlanCreateNestedOneWithoutDailySchedulesInput = {
    create?: XOR<WeeklyPlanCreateWithoutDailySchedulesInput, WeeklyPlanUncheckedCreateWithoutDailySchedulesInput>
    connectOrCreate?: WeeklyPlanCreateOrConnectWithoutDailySchedulesInput
    connect?: WeeklyPlanWhereUniqueInput
  }

  export type DailyScheduleItemUncheckedCreateNestedManyWithoutDailyScheduleInput = {
    create?: XOR<Enumerable<DailyScheduleItemCreateWithoutDailyScheduleInput>, Enumerable<DailyScheduleItemUncheckedCreateWithoutDailyScheduleInput>>
    connectOrCreate?: Enumerable<DailyScheduleItemCreateOrConnectWithoutDailyScheduleInput>
    createMany?: DailyScheduleItemCreateManyDailyScheduleInputEnvelope
    connect?: Enumerable<DailyScheduleItemWhereUniqueInput>
  }

  export type DailyScheduleItemUpdateManyWithoutDailyScheduleNestedInput = {
    create?: XOR<Enumerable<DailyScheduleItemCreateWithoutDailyScheduleInput>, Enumerable<DailyScheduleItemUncheckedCreateWithoutDailyScheduleInput>>
    connectOrCreate?: Enumerable<DailyScheduleItemCreateOrConnectWithoutDailyScheduleInput>
    upsert?: Enumerable<DailyScheduleItemUpsertWithWhereUniqueWithoutDailyScheduleInput>
    createMany?: DailyScheduleItemCreateManyDailyScheduleInputEnvelope
    set?: Enumerable<DailyScheduleItemWhereUniqueInput>
    disconnect?: Enumerable<DailyScheduleItemWhereUniqueInput>
    delete?: Enumerable<DailyScheduleItemWhereUniqueInput>
    connect?: Enumerable<DailyScheduleItemWhereUniqueInput>
    update?: Enumerable<DailyScheduleItemUpdateWithWhereUniqueWithoutDailyScheduleInput>
    updateMany?: Enumerable<DailyScheduleItemUpdateManyWithWhereWithoutDailyScheduleInput>
    deleteMany?: Enumerable<DailyScheduleItemScalarWhereInput>
  }

  export type WeeklyPlanUpdateOneRequiredWithoutDailySchedulesNestedInput = {
    create?: XOR<WeeklyPlanCreateWithoutDailySchedulesInput, WeeklyPlanUncheckedCreateWithoutDailySchedulesInput>
    connectOrCreate?: WeeklyPlanCreateOrConnectWithoutDailySchedulesInput
    upsert?: WeeklyPlanUpsertWithoutDailySchedulesInput
    connect?: WeeklyPlanWhereUniqueInput
    update?: XOR<WeeklyPlanUpdateWithoutDailySchedulesInput, WeeklyPlanUncheckedUpdateWithoutDailySchedulesInput>
  }

  export type DailyScheduleItemUncheckedUpdateManyWithoutDailyScheduleNestedInput = {
    create?: XOR<Enumerable<DailyScheduleItemCreateWithoutDailyScheduleInput>, Enumerable<DailyScheduleItemUncheckedCreateWithoutDailyScheduleInput>>
    connectOrCreate?: Enumerable<DailyScheduleItemCreateOrConnectWithoutDailyScheduleInput>
    upsert?: Enumerable<DailyScheduleItemUpsertWithWhereUniqueWithoutDailyScheduleInput>
    createMany?: DailyScheduleItemCreateManyDailyScheduleInputEnvelope
    set?: Enumerable<DailyScheduleItemWhereUniqueInput>
    disconnect?: Enumerable<DailyScheduleItemWhereUniqueInput>
    delete?: Enumerable<DailyScheduleItemWhereUniqueInput>
    connect?: Enumerable<DailyScheduleItemWhereUniqueInput>
    update?: Enumerable<DailyScheduleItemUpdateWithWhereUniqueWithoutDailyScheduleInput>
    updateMany?: Enumerable<DailyScheduleItemUpdateManyWithWhereWithoutDailyScheduleInput>
    deleteMany?: Enumerable<DailyScheduleItemScalarWhereInput>
  }

  export type DailyScheduleCreateNestedOneWithoutDailyScheduleItemsInput = {
    create?: XOR<DailyScheduleCreateWithoutDailyScheduleItemsInput, DailyScheduleUncheckedCreateWithoutDailyScheduleItemsInput>
    connectOrCreate?: DailyScheduleCreateOrConnectWithoutDailyScheduleItemsInput
    connect?: DailyScheduleWhereUniqueInput
  }

  export type DailyScheduleUpdateOneRequiredWithoutDailyScheduleItemsNestedInput = {
    create?: XOR<DailyScheduleCreateWithoutDailyScheduleItemsInput, DailyScheduleUncheckedCreateWithoutDailyScheduleItemsInput>
    connectOrCreate?: DailyScheduleCreateOrConnectWithoutDailyScheduleItemsInput
    upsert?: DailyScheduleUpsertWithoutDailyScheduleItemsInput
    connect?: DailyScheduleWhereUniqueInput
    update?: XOR<DailyScheduleUpdateWithoutDailyScheduleItemsInput, DailyScheduleUncheckedUpdateWithoutDailyScheduleItemsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type LearningFocusCreateWithoutStudentInput = {
    name: string
    description: string
    createdAt?: Date | string
  }

  export type LearningFocusUncheckedCreateWithoutStudentInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
  }

  export type LearningFocusCreateOrConnectWithoutStudentInput = {
    where: LearningFocusWhereUniqueInput
    create: XOR<LearningFocusCreateWithoutStudentInput, LearningFocusUncheckedCreateWithoutStudentInput>
  }

  export type LearningFocusCreateManyStudentInputEnvelope = {
    data: Enumerable<LearningFocusCreateManyStudentInput>
    skipDuplicates?: boolean
  }

  export type LearningFocusUpsertWithWhereUniqueWithoutStudentInput = {
    where: LearningFocusWhereUniqueInput
    update: XOR<LearningFocusUpdateWithoutStudentInput, LearningFocusUncheckedUpdateWithoutStudentInput>
    create: XOR<LearningFocusCreateWithoutStudentInput, LearningFocusUncheckedCreateWithoutStudentInput>
  }

  export type LearningFocusUpdateWithWhereUniqueWithoutStudentInput = {
    where: LearningFocusWhereUniqueInput
    data: XOR<LearningFocusUpdateWithoutStudentInput, LearningFocusUncheckedUpdateWithoutStudentInput>
  }

  export type LearningFocusUpdateManyWithWhereWithoutStudentInput = {
    where: LearningFocusScalarWhereInput
    data: XOR<LearningFocusUpdateManyMutationInput, LearningFocusUncheckedUpdateManyWithoutLearningFocusesInput>
  }

  export type LearningFocusScalarWhereInput = {
    AND?: Enumerable<LearningFocusScalarWhereInput>
    OR?: Enumerable<LearningFocusScalarWhereInput>
    NOT?: Enumerable<LearningFocusScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    studentId?: IntFilter | number
  }

  export type StudentCreateWithoutLearningFocusesInput = {
    name: string
    createdAt?: Date | string
  }

  export type StudentUncheckedCreateWithoutLearningFocusesInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type StudentCreateOrConnectWithoutLearningFocusesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutLearningFocusesInput, StudentUncheckedCreateWithoutLearningFocusesInput>
  }

  export type StudentUpsertWithoutLearningFocusesInput = {
    update: XOR<StudentUpdateWithoutLearningFocusesInput, StudentUncheckedUpdateWithoutLearningFocusesInput>
    create: XOR<StudentCreateWithoutLearningFocusesInput, StudentUncheckedCreateWithoutLearningFocusesInput>
  }

  export type StudentUpdateWithoutLearningFocusesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateWithoutLearningFocusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateWithoutWeeklyPlanInput = {
    title: string
    author: string
  }

  export type BookUncheckedCreateWithoutWeeklyPlanInput = {
    id?: number
    title: string
    author: string
  }

  export type BookCreateOrConnectWithoutWeeklyPlanInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutWeeklyPlanInput, BookUncheckedCreateWithoutWeeklyPlanInput>
  }

  export type BookCreateManyWeeklyPlanInputEnvelope = {
    data: Enumerable<BookCreateManyWeeklyPlanInput>
    skipDuplicates?: boolean
  }

  export type DailyScheduleCreateWithoutWeeklyPlanInput = {
    date: Date | string
    dailyScheduleItems?: DailyScheduleItemCreateNestedManyWithoutDailyScheduleInput
  }

  export type DailyScheduleUncheckedCreateWithoutWeeklyPlanInput = {
    id?: number
    date: Date | string
    dailyScheduleItems?: DailyScheduleItemUncheckedCreateNestedManyWithoutDailyScheduleInput
  }

  export type DailyScheduleCreateOrConnectWithoutWeeklyPlanInput = {
    where: DailyScheduleWhereUniqueInput
    create: XOR<DailyScheduleCreateWithoutWeeklyPlanInput, DailyScheduleUncheckedCreateWithoutWeeklyPlanInput>
  }

  export type DailyScheduleCreateManyWeeklyPlanInputEnvelope = {
    data: Enumerable<DailyScheduleCreateManyWeeklyPlanInput>
    skipDuplicates?: boolean
  }

  export type BookUpsertWithWhereUniqueWithoutWeeklyPlanInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutWeeklyPlanInput, BookUncheckedUpdateWithoutWeeklyPlanInput>
    create: XOR<BookCreateWithoutWeeklyPlanInput, BookUncheckedCreateWithoutWeeklyPlanInput>
  }

  export type BookUpdateWithWhereUniqueWithoutWeeklyPlanInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutWeeklyPlanInput, BookUncheckedUpdateWithoutWeeklyPlanInput>
  }

  export type BookUpdateManyWithWhereWithoutWeeklyPlanInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutBooksInput>
  }

  export type BookScalarWhereInput = {
    AND?: Enumerable<BookScalarWhereInput>
    OR?: Enumerable<BookScalarWhereInput>
    NOT?: Enumerable<BookScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    author?: StringFilter | string
    weeklyPlanId?: IntFilter | number
  }

  export type DailyScheduleUpsertWithWhereUniqueWithoutWeeklyPlanInput = {
    where: DailyScheduleWhereUniqueInput
    update: XOR<DailyScheduleUpdateWithoutWeeklyPlanInput, DailyScheduleUncheckedUpdateWithoutWeeklyPlanInput>
    create: XOR<DailyScheduleCreateWithoutWeeklyPlanInput, DailyScheduleUncheckedCreateWithoutWeeklyPlanInput>
  }

  export type DailyScheduleUpdateWithWhereUniqueWithoutWeeklyPlanInput = {
    where: DailyScheduleWhereUniqueInput
    data: XOR<DailyScheduleUpdateWithoutWeeklyPlanInput, DailyScheduleUncheckedUpdateWithoutWeeklyPlanInput>
  }

  export type DailyScheduleUpdateManyWithWhereWithoutWeeklyPlanInput = {
    where: DailyScheduleScalarWhereInput
    data: XOR<DailyScheduleUpdateManyMutationInput, DailyScheduleUncheckedUpdateManyWithoutDailySchedulesInput>
  }

  export type DailyScheduleScalarWhereInput = {
    AND?: Enumerable<DailyScheduleScalarWhereInput>
    OR?: Enumerable<DailyScheduleScalarWhereInput>
    NOT?: Enumerable<DailyScheduleScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    weeklyPlanId?: IntFilter | number
  }

  export type WeeklyPlanCreateWithoutBooksInput = {
    startDate: Date | string
    endDate: Date | string
    resourcesNeeded?: WeeklyPlanCreateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanCreateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleCreateNestedManyWithoutWeeklyPlanInput
  }

  export type WeeklyPlanUncheckedCreateWithoutBooksInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    resourcesNeeded?: WeeklyPlanCreateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanCreateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleUncheckedCreateNestedManyWithoutWeeklyPlanInput
  }

  export type WeeklyPlanCreateOrConnectWithoutBooksInput = {
    where: WeeklyPlanWhereUniqueInput
    create: XOR<WeeklyPlanCreateWithoutBooksInput, WeeklyPlanUncheckedCreateWithoutBooksInput>
  }

  export type WeeklyPlanUpsertWithoutBooksInput = {
    update: XOR<WeeklyPlanUpdateWithoutBooksInput, WeeklyPlanUncheckedUpdateWithoutBooksInput>
    create: XOR<WeeklyPlanCreateWithoutBooksInput, WeeklyPlanUncheckedCreateWithoutBooksInput>
  }

  export type WeeklyPlanUpdateWithoutBooksInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleUpdateManyWithoutWeeklyPlanNestedInput
  }

  export type WeeklyPlanUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
    dailySchedules?: DailyScheduleUncheckedUpdateManyWithoutWeeklyPlanNestedInput
  }

  export type DailyScheduleItemCreateWithoutDailyScheduleInput = {
    time: Date | string
    planDescription: string
  }

  export type DailyScheduleItemUncheckedCreateWithoutDailyScheduleInput = {
    id?: number
    time: Date | string
    planDescription: string
  }

  export type DailyScheduleItemCreateOrConnectWithoutDailyScheduleInput = {
    where: DailyScheduleItemWhereUniqueInput
    create: XOR<DailyScheduleItemCreateWithoutDailyScheduleInput, DailyScheduleItemUncheckedCreateWithoutDailyScheduleInput>
  }

  export type DailyScheduleItemCreateManyDailyScheduleInputEnvelope = {
    data: Enumerable<DailyScheduleItemCreateManyDailyScheduleInput>
    skipDuplicates?: boolean
  }

  export type WeeklyPlanCreateWithoutDailySchedulesInput = {
    startDate: Date | string
    endDate: Date | string
    books?: BookCreateNestedManyWithoutWeeklyPlanInput
    resourcesNeeded?: WeeklyPlanCreateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanCreateactivitiesInput | Enumerable<string>
  }

  export type WeeklyPlanUncheckedCreateWithoutDailySchedulesInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    books?: BookUncheckedCreateNestedManyWithoutWeeklyPlanInput
    resourcesNeeded?: WeeklyPlanCreateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanCreateactivitiesInput | Enumerable<string>
  }

  export type WeeklyPlanCreateOrConnectWithoutDailySchedulesInput = {
    where: WeeklyPlanWhereUniqueInput
    create: XOR<WeeklyPlanCreateWithoutDailySchedulesInput, WeeklyPlanUncheckedCreateWithoutDailySchedulesInput>
  }

  export type DailyScheduleItemUpsertWithWhereUniqueWithoutDailyScheduleInput = {
    where: DailyScheduleItemWhereUniqueInput
    update: XOR<DailyScheduleItemUpdateWithoutDailyScheduleInput, DailyScheduleItemUncheckedUpdateWithoutDailyScheduleInput>
    create: XOR<DailyScheduleItemCreateWithoutDailyScheduleInput, DailyScheduleItemUncheckedCreateWithoutDailyScheduleInput>
  }

  export type DailyScheduleItemUpdateWithWhereUniqueWithoutDailyScheduleInput = {
    where: DailyScheduleItemWhereUniqueInput
    data: XOR<DailyScheduleItemUpdateWithoutDailyScheduleInput, DailyScheduleItemUncheckedUpdateWithoutDailyScheduleInput>
  }

  export type DailyScheduleItemUpdateManyWithWhereWithoutDailyScheduleInput = {
    where: DailyScheduleItemScalarWhereInput
    data: XOR<DailyScheduleItemUpdateManyMutationInput, DailyScheduleItemUncheckedUpdateManyWithoutDailyScheduleItemsInput>
  }

  export type DailyScheduleItemScalarWhereInput = {
    AND?: Enumerable<DailyScheduleItemScalarWhereInput>
    OR?: Enumerable<DailyScheduleItemScalarWhereInput>
    NOT?: Enumerable<DailyScheduleItemScalarWhereInput>
    id?: IntFilter | number
    time?: DateTimeFilter | Date | string
    planDescription?: StringFilter | string
    dailyScheduleId?: IntFilter | number
  }

  export type WeeklyPlanUpsertWithoutDailySchedulesInput = {
    update: XOR<WeeklyPlanUpdateWithoutDailySchedulesInput, WeeklyPlanUncheckedUpdateWithoutDailySchedulesInput>
    create: XOR<WeeklyPlanCreateWithoutDailySchedulesInput, WeeklyPlanUncheckedCreateWithoutDailySchedulesInput>
  }

  export type WeeklyPlanUpdateWithoutDailySchedulesInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: BookUpdateManyWithoutWeeklyPlanNestedInput
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
  }

  export type WeeklyPlanUncheckedUpdateWithoutDailySchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: BookUncheckedUpdateManyWithoutWeeklyPlanNestedInput
    resourcesNeeded?: WeeklyPlanUpdateresourcesNeededInput | Enumerable<string>
    activities?: WeeklyPlanUpdateactivitiesInput | Enumerable<string>
  }

  export type DailyScheduleCreateWithoutDailyScheduleItemsInput = {
    date: Date | string
    weeklyPlan: WeeklyPlanCreateNestedOneWithoutDailySchedulesInput
  }

  export type DailyScheduleUncheckedCreateWithoutDailyScheduleItemsInput = {
    id?: number
    date: Date | string
    weeklyPlanId: number
  }

  export type DailyScheduleCreateOrConnectWithoutDailyScheduleItemsInput = {
    where: DailyScheduleWhereUniqueInput
    create: XOR<DailyScheduleCreateWithoutDailyScheduleItemsInput, DailyScheduleUncheckedCreateWithoutDailyScheduleItemsInput>
  }

  export type DailyScheduleUpsertWithoutDailyScheduleItemsInput = {
    update: XOR<DailyScheduleUpdateWithoutDailyScheduleItemsInput, DailyScheduleUncheckedUpdateWithoutDailyScheduleItemsInput>
    create: XOR<DailyScheduleCreateWithoutDailyScheduleItemsInput, DailyScheduleUncheckedCreateWithoutDailyScheduleItemsInput>
  }

  export type DailyScheduleUpdateWithoutDailyScheduleItemsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weeklyPlan?: WeeklyPlanUpdateOneRequiredWithoutDailySchedulesNestedInput
  }

  export type DailyScheduleUncheckedUpdateWithoutDailyScheduleItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weeklyPlanId?: IntFieldUpdateOperationsInput | number
  }

  export type LearningFocusCreateManyStudentInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
  }

  export type LearningFocusUpdateWithoutStudentInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningFocusUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningFocusUncheckedUpdateManyWithoutLearningFocusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateManyWeeklyPlanInput = {
    id?: number
    title: string
    author: string
  }

  export type DailyScheduleCreateManyWeeklyPlanInput = {
    id?: number
    date: Date | string
  }

  export type BookUpdateWithoutWeeklyPlanInput = {
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type BookUncheckedUpdateWithoutWeeklyPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type BookUncheckedUpdateManyWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type DailyScheduleUpdateWithoutWeeklyPlanInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyScheduleItems?: DailyScheduleItemUpdateManyWithoutDailyScheduleNestedInput
  }

  export type DailyScheduleUncheckedUpdateWithoutWeeklyPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyScheduleItems?: DailyScheduleItemUncheckedUpdateManyWithoutDailyScheduleNestedInput
  }

  export type DailyScheduleUncheckedUpdateManyWithoutDailySchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyScheduleItemCreateManyDailyScheduleInput = {
    id?: number
    time: Date | string
    planDescription: string
  }

  export type DailyScheduleItemUpdateWithoutDailyScheduleInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    planDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DailyScheduleItemUncheckedUpdateWithoutDailyScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    planDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DailyScheduleItemUncheckedUpdateManyWithoutDailyScheduleItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    planDescription?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}