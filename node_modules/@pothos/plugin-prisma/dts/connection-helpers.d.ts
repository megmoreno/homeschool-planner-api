import { SchemaTypes } from '@pothos/core';
import { PrismaObjectRef } from './object-ref';
import type { PrismaModelTypes } from './types';
export declare const prismaModelKey: unique symbol;
export declare function prismaConnectionHelpers<Types extends SchemaTypes, RefOrType extends PrismaObjectRef<PrismaModelTypes> | keyof Types['PrismaTypes'], Model extends PrismaModelTypes = RefOrType extends PrismaObjectRef<infer T> ? T & PrismaModelTypes : Types['PrismaTypes'][RefOrType & keyof Types['PrismaTypes']] & PrismaModelTypes, Shape = RefOrType extends PrismaObjectRef<PrismaModelTypes, infer T> ? T : Model['Shape']>(builder: PothosSchemaTypes.SchemaBuilder<Types>, refOrType: RefOrType, options: {
    cursor: string & keyof Model['WhereUnique'];
    defaultSize?: number | ((args: PothosSchemaTypes.DefaultConnectionArguments, ctx: {}) => number);
    maxSize?: number | ((args: PothosSchemaTypes.DefaultConnectionArguments, ctx: {}) => number);
}): {
    ref: PrismaObjectRef<Model, {}>;
    resolve: (list: (Shape & {})[], args: PothosSchemaTypes.DefaultConnectionArguments, ctx: Types['Context']) => {
        totalCount: number | (() => import("@pothos/core").MaybePromise<number>) | undefined;
        edges: ({
            cursor: string;
            node: Shape & {};
        } | null)[];
        pageInfo: {
            startCursor: string | undefined;
            endCursor: string | undefined;
            hasPreviousPage: boolean;
            hasNextPage: boolean;
        };
    };
    getQuery: (args: PothosSchemaTypes.DefaultConnectionArguments, ctx: Types['Context']) => {
        take: number;
        skip: number;
        cursor?: undefined;
    } | {
        cursor: Record<string, unknown>;
        take: number;
        skip: number;
    };
};
//# sourceMappingURL=connection-helpers.d.ts.map